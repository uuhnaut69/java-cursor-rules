package info.jab.functional;

import java.util.ArrayList;
import java.util.List;

public class EulerProblem02 implements IEuler<Long, Long> {

    private static List<Long> fibonacci(Long limit) {

        List<Long> fibonacciList = new ArrayList<>();

        long previousNumber = 1;
        long nextNumber = 2;

        while(previousNumber <= limit) {

            fibonacciList.add(previousNumber);

            long sum = previousNumber + nextNumber;
            previousNumber = nextNumber;
            nextNumber = sum;
        }

        return fibonacciList;
    }

    /**
     * Even Fibonacci numbers
     * https://projecteuler.net/problem=2
     *
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
     * By starting with 1 and 2, the first 10 terms will be:
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     *
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
     *
     * @param limit
     * @return
     */
    @Override
    public Long solution(Long limit) {

        long sum = 0;

        for (long number : fibonacci(limit)) {
            if (number % 2 == 0) {
                sum += number;
            }
        }

        return sum;
    }
}
