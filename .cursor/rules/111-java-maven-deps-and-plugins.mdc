---
description:
globs:
alwaysApply: false
---
# Update pom.xml to add Maven dependencies and plugins

## Role

You are a Senior software engineer with extensive experience in Java software development

## Goal

This rule provides a comprehensive, conversational approach to updating Maven pom.xml files with properties, dependencies, plugins, and profiles. It MUST ask questions first to understand the project needs and then conditionally add only relevant components.

## Instructions

### Step 1: Maven Wrapper Check and Installation

**First, check for Maven Wrapper files** in the project root
- Look for `mvnw` (Unix/Mac) and `mvnw.cmd` (Windows) files
- Check for `.mvn/wrapper/` directory with `maven-wrapper.properties`

**If Maven Wrapper is NOT present:**

**STOP HERE** and ask the user: "I notice this project doesn't have Maven Wrapper configured.
The Maven Wrapper ensures everyone uses the same Maven version, improving build consistency across different environments.
Would you like me to install it? (y/n)"

**WAIT for the user's response. Do NOT proceed to any other questions or steps until this is resolved.**

if the user says "y", then install the Maven Wrapper.

```bash
mvn wrapper:wrapper
```

### Step 2: Project Assessment Questions

**CRITICAL**: You MUST ask the exact questions from the following template in strict order before making any changes to understand the project needs.
Based on the answers, you will conditionally add only relevant dependencies and plugins.

```markdown
# Java Maven Configuration Questions

**IMPORTANT**: Ask these questions to understand the project needs before making any changes to the pom.xml. Based on the answers, you will conditionally add only relevant dependencies and plugins.

## 1. Project Nature

**What type of Java project is this?**

Options:
- Java Library (for publishing to Maven Central/Nexus)
- Java CLI Application (command-line tool)
- Java Microservice (Web service/REST API/Modular monolith)
- Serverless (AWS Lambdas, Azure Functions)
- Other (specify)

## 2. Java Version

**Which Java version does your project target?**

Options:

- Java 17 (LTS - recommended for new projects)
- Java 21 (LTS - latest LTS version)
- Java 24 (latest features)
- Other (specify version)

## 3. Build and Quality Aspects

**What build and quality aspects are important for your project?** (Select all that apply)

Options:
- Format source code (Spotless)
- Maven Enforcer
- Compiler behaviour improvements with ErrorProne + NullAway (Ask for JSpecify)
- Unit Testing (Surefire)
- Integration testing (Failsafe)
- Code coverage reporting (JaCoCo)
- Mutation testing (PiTest)
- Security vulnerability scanning (OWASP)
- Static code analysis (SpotBugs, PMD)
- Sonar
- Version management

## 4. Coverage Threshold

**What is your target coverage threshold?**

Options:
- 70% (moderate)
- 80% (recommended)
- 90% (high)
- Custom percentage (specify)

## 5. Sonar Configuration (conditional)

**Note**: This question is only asked if "Static code analysis (SpotBugs, Sonar)" was selected in question 3.

**Do you want to configure Sonar/SonarCloud integration?** (y/n)

**If yes, please provide the following information:**

### 5.1 Sonar Organization

**What is your Sonar organization identifier?**

- For SonarCloud: This is typically your GitHub username or organization name
- For SonarQube: This is your organization key as configured in SonarQube
- Example: `my-github-user` or `my-company-org`

### 5.2 Sonar Project Key

**What is your Sonar project key?**

- For SonarCloud: Usually in format `GITHUB_USER_REPOSITORY_NAME` (e.g., `john-doe_my-java-project`)
- For SonarQube: Custom project key as defined in your SonarQube instance
- Must be unique within your Sonar organization
- Example: `john-doe_awesome-java-lib`

### 5.3 Sonar Project Name

**What is your Sonar project display name?**

- Human-readable name for your project as it appears in Sonar dashboard
- Can contain spaces and special characters
- Example: `Awesome Java Library` or `My Microservice API`

## 6. Sonar Host Configuration (conditional)

**Note**: This question is only asked if Sonar configuration was enabled in question 5.

**Which Sonar service are you using?**

Options:
- SonarCloud (https://sonarcloud.io) - recommended for open source projects
- SonarQube Server (specify your server URL)

**If SonarQube Server**: Please provide your SonarQube server URL (e.g., `https://sonar.mycompany.com`)

```

#### Step Constraints

- **MUST** read template files fresh using file_search and read_file tools before asking any questions
- **MUST NOT** use cached or remembered questions from previous interactions
- **MUST** ask questions ONE BY ONE in the exact order specified in the template
- **MUST** WAIT for user response to each question before proceeding to the next
- **MUST** use the EXACT wording from the template questions
- **MUST** present the EXACT options listed in the template
- **MUST** include recommendations when specified in the template
- **MUST NOT** ask all questions simultaneously
- **MUST NOT** assume answers or provide defaults
- **MUST NOT** skip questions or change their order
- **MUST** follow question sequence: Project Nature → Java Version → Build and Quality Aspects → Coverage Threshold (conditional) → Sonar Configuration (conditional) → Sonar Host Configuration (conditional)
- **MUST** verify that ALL options from the template are included before asking questions
- **MUST** cross-check question content against the freshly read template file
- **MUST** re-read the template and correct questions if there are discrepancies
- **MUST** STOP and verify all applicable questions have been answered
- **MUST NOT** proceed to Step 3 until complete responses received
- **MUST** confirm understanding of user selections before implementation
- **MUST NOT** ask about Coverage Threshold if user did not select jacoco coverage

### Step 3: Conditional Configuration Based on Answers

                    Use the following template to add the dependencies and plugins to the pom.xml file.

                    ```markdown
                    # Java Maven Plugins

This template provides Maven plugin configurations that should be added conditionally based on user selections from the main Maven dependencies and plugins rule.

**Usage**: Reference this template from the main rule rather than duplicating configurations.

## Core Plugins

### Add maven-plugin-enforcer

Nature: General
Category: Build

Update the pom.xml with this new plugin:

```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-enforcer-plugin</artifactId>
    <version>${maven-plugin-enforcer.version}</version>
    <dependencies>
        <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>extra-enforcer-rules</artifactId>
            <version>${extra-enforcer-rules.version}</version>
        </dependency>
    </dependencies>
    <executions>
        <execution>
            <id>enforce</id>
            <configuration>
                <rules>
                    <banCircularDependencies/>
                    <dependencyConvergence />
                    <banDuplicatePomDependencyVersions />
                    <requireMavenVersion>
                        <version>${maven.version}</version>
                    </requireMavenVersion>
                    <requireJavaVersion>
                        <version>${java.version}</version>
                    </requireJavaVersion>
                    <bannedDependencies>
                        <excludes>
                            <exclude>org.projectlombok:lombok</exclude>
                        </excludes>
                    </bannedDependencies>
                </rules>
                <fail>true</fail>
            </configuration>
            <goals>
                <goal>enforce</goal>
            </goals>
        </execution>
    </executions>
</plugin>
```

### Add maven-plugin-compiler (Enhanced)

**When to use**: Always included, but ask about enhancement level.
**User question**: "Do you want enhanced code analysis with Error Prone and NullAway? (y/n)"

Nature: General
Category: Build

**If enhanced analysis selected**, create/update the file $(pwd)/.mvn/jvm.config with the following content:

```txt
--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED
--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED
--add-exports jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED
--add-exports jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED
--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED
--add-exports jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED
--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED
--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED
--add-opens jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED
--add-opens jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED
```

Update the pom.xml with this new plugin:

```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>${maven-plugin-compiler.version}</version>
    <configuration>
        <release>${java.version}</release>
        <compilerArgs>
            <arg>-Xlint:all</arg>
            <arg>-Werror</arg>
            <!-- Error prone settings-->
            <arg>-XDcompilePolicy=simple</arg>
            <arg>--should-stop=ifError=FLOW</arg>
            <arg>-Xplugin:ErrorProne \
                -Xep:NullAway:ERROR \
                -XepOpt:NullAway:JSpecifyMode=true \
                -XepOpt:NullAway:TreatGeneratedAsUnannotated=true \
                -XepOpt:NullAway:CheckOptionalEmptiness=true \
                -XepOpt:NullAway:HandleTestAssertionLibraries=true \
                -XepOpt:NullAway:AssertsEnabled=true \
                -XepOpt:NullAway:AnnotatedPackages=info.jab.cli
            </arg>
        </compilerArgs>
        <annotationProcessorPaths>
            <path>
                <groupId>com.google.errorprone</groupId>
                <artifactId>error_prone_core</artifactId>
                <version>${error-prone.version}</version>
            </path>
            <path>
                <groupId>com.uber.nullaway</groupId>
                <artifactId>nullaway</artifactId>
                <version>${nullaway.version}</version>
            </path>
        </annotationProcessorPaths>
    </configuration>
</plugin>
```

## Optional Build Enhancement Plugins

### Add spotless-maven-plugin

Nature: General
Category: Build

Update the pom.xml with this plugin:

```xml
<plugin>
    <groupId>com.diffplug.spotless</groupId>
    <artifactId>spotless-maven-plugin</artifactId>
    <version>${maven-plugin-spotless.version}</version>
    <configuration>
        <encoding>UTF-8</encoding>
        <java>
            <removeUnusedImports />
            <importOrder>
                <order>,\#</order>
            </importOrder>
            <endWithNewline />
            <trimTrailingWhitespace />
            <indent>
                <spaces>true</spaces>
                <spacesPerTab>4</spacesPerTab>
            </indent>
        </java>
    </configuration>
    <executions>
        <execution>
            <goals>
                <goal>check</goal>
            </goals>
            <phase>process-sources</phase>
        </execution>
    </executions>
</plugin>
```

### Add flatten-maven-plugin

**When to use**: For library projects that will be published to Maven repositories.
**User question**: "Are you building a library that will be published to Maven repositories? (y/n)"

Nature: Libraries
Category: Build

Update the pom.xml with this plugin:

```xml
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>flatten-maven-plugin</artifactId>
    <version>${maven-plugin-flatten.version}</version>
    <configuration>
    </configuration>
    <executions>
        <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals>
                <goal>flatten</goal>
            </goals>
        </execution>
        <execution>
            <id>flatten.clean</id>
            <phase>clean</phase>
            <goals>
                <goal>clean</goal>
            </goals>
        </execution>
    </executions>
</plugin>
```

### Add versions-maven-plugin

**When to use**: For projects that want to manage dependency versions systematically.
**User question**: "Do you want tools to help manage and update dependency versions? (y/n)"

Nature: General
Category: Build

Update the pom.xml with this plugin:

```xml
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>versions-maven-plugin</artifactId>
    <version>${maven-plugin-versions.version}</version>
    <configuration>
        <allowSnapshots>false</allowSnapshots>
    </configuration>
</plugin>
```

### Add git-commit-id-plugin

**When to use**: For applications that need build information (version, commit, etc.) at runtime.
**User question**: "Do you want to include Git commit information in your build? (y/n)"

Nature: General
Category: Build

Update the pom.xml with this plugin:

```xml
<plugin>
    <groupId>pl.project13.maven</groupId>
    <artifactId>git-commit-id-plugin</artifactId>
    <version>${maven-plugin-git-commit-id.version}</version>
    <executions>
        <execution>
            <id>get-the-git-infos</id>
            <goals>
                <goal>revision</goal>
            </goals>
            <phase>initialize</phase>
        </execution>
    </executions>
    <configuration>
        <generateGitPropertiesFile>true</generateGitPropertiesFile>
        <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
        <commitIdGenerationMode>full</commitIdGenerationMode>
    </configuration>
</plugin>
```

## Testing Plugins

### Add maven-plugin-surefire

**When to use**: Always included for unit testing.
**User question**: Automatically included with testing framework selection.

Nature: General
Category: Testing

Update the pom.xml with this plugin:

```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>${maven-plugin-surefire.version}</version>
    <configuration>
        <skipAfterFailureCount>1</skipAfterFailureCount>
        <includes>
            <include>**/*Test.java</include>
        </includes>
        <excludes>
            <exclude>**/*IT.java</exclude>
        </excludes>
    </configuration>
</plugin>
```

### Add maven-failsafe-plugin

**When to use**: Only if integration testing is selected.
**User question**: "Do you want to set up integration testing? (y/n)"

Nature: General
Category: Testing

Update the pom.xml with this plugin:

```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-failsafe-plugin</artifactId>
    <version>${maven-plugin-failsafe.version}</version>
    <configuration>
        <includes>
            <include>**/*IT.java</include>
        </includes>
        <excludes>
            <exclude>**/*Test.java</exclude>
        </excludes>
    </configuration>
    <executions>
        <execution>
            <goals>
                <goal>integration-test</goal>
            </goals>
        </execution>
    </executions>
</plugin>
```

### Add test reports

**When to use**: If user wants HTML test reports.
**User question**: "Do you want HTML test reports generated? (y/n)"

Nature: General
Category: Testing

Update the pom.xml with this reporting section:

```xml
<reporting>
    <plugins>
        <!-- Generates HTML test reports -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-report-plugin</artifactId>
            <version>${maven-plugin-surefire.version}</version>
            <configuration>
                <outputName>junit-report</outputName>
                <showSuccess>true</showSuccess>
            </configuration>
        </plugin>

        <!-- Adds links to source code in reports -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jxr-plugin</artifactId>
            <version>${maven-plugin-jxr.version}</version>
        </plugin>
    </plugins>
</reporting>
```

## Quality Analysis Profiles

### Add jacoco-maven-plugin

**When to use**: Only if code coverage analysis is selected.
**User question**: "Do you want code coverage analysis? (y/n)"

Nature: General
Category: Code coverage

Update the pom.xml with this profile to run jacoco:

```xml
<profiles>
    <profile>
        <id>jacoco</id>
        <activation>
            <activeByDefault>false</activeByDefault>
        </activation>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${maven-plugin-jacoco.version}</version>
                    <executions>
                        <execution>
                            <id>prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>report</id>
                            <phase>test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>check</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>check</goal>
                            </goals>
                            <configuration>
                                <rules>
                                    <rule>
                                        <element>BUNDLE</element>
                                        <limits>
                                            <limit>
                                                <counter>LINE</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${coverage.level}%</minimum>
                                            </limit>
                                            <limit>
                                                <counter>BRANCH</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${coverage.level}%</minimum>
                                            </limit>
                                            <limit>
                                                <counter>METHOD</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${coverage.level}%</minimum>
                                            </limit>
                                            <limit>
                                                <counter>CLASS</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${coverage.level}%</minimum>
                                            </limit>
                                            <limit>
                                                <counter>INSTRUCTION</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${coverage.level}%</minimum>
                                            </limit>
                                            <limit>
                                                <counter>COMPLEXITY</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${coverage.level}%</minimum>
                                            </limit>
                                        </limits>
                                    </rule>
                                </rules>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </build>
    </profile>
</profiles>
```

### Add Pitest profile 

**When to use**: Only if mutation testing is selected.
**User question**: "Do you want mutation testing to analyze test quality? (y/n)"

Nature: General
Category: Mutation Testing

Update the pom.xml with this profile to execute Mutation testing in order to analyze the quality of your asserts

```xml
<profile>
    <id>pitest</id>
    <activation>
        <activeByDefault>false</activeByDefault>
    </activation>
    <build>
        <plugins>
            <plugin>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-maven</artifactId>
                <version>${maven-plugin-pitest.version}</version>
                <configuration>
                    <targetClasses>
                        <param>info.jab.cli.*</param>
                    </targetClasses>
                    <targetTests>
                        <param>info.jab.cli.*</param>
                    </targetTests>
                    <outputFormats>
                        <outputFormat>HTML</outputFormat>
                        <outputFormat>XML</outputFormat>
                    </outputFormats>
                    <mutationThreshold>${coverage.level}</mutationThreshold>
                    <coverageThreshold>${coverage.level}</coverageThreshold>
                    <timestampedReports>false</timestampedReports>
                    <verbose>false</verbose>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-junit5-plugin</artifactId>
                        <version>${maven-plugin-pitest-junit5.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>pitest-mutation-testing</id>
                        <goals>
                            <goal>mutationCoverage</goal>
                        </goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</profile>
```

### Add security profile to execute dependency-check

**When to use**: Only if security scanning is selected.
**User question**: "Do you want security vulnerability scanning for dependencies? (y/n)"

Nature: General
Category: Security

Update the pom.xml with this profile

```xml
<profile>
    <id>security</id>
    <activation>
        <activeByDefault>false</activeByDefault>
    </activation>
    <build>
        <plugins>
            <plugin>
                <groupId>org.owasp</groupId>
                <artifactId>dependency-check-maven</artifactId>
                <version>${maven-plugin-dependency-check.version}</version>
                <configuration>
                    <outputDirectory>${project.build.directory}/dependency-check</outputDirectory>
                    <format>ALL</format>
                    <failBuildOnCVSS>7</failBuildOnCVSS>
                    <skipProvidedScope>false</skipProvidedScope>
                    <skipRuntimeScope>false</skipRuntimeScope>
                    <skipSystemScope>false</skipSystemScope>
                    <skipTestScope>false</skipTestScope>
                    <!-- Performance and reliability improvements -->
                    <nvdApiDelay>4000</nvdApiDelay>
                    <nvdMaxRetryCount>3</nvdMaxRetryCount>
                    <nvdValidForHours>24</nvdValidForHours>
                    <!-- Skip analyzers that might cause issues -->
                    <nodeAnalyzerEnabled>false</nodeAnalyzerEnabled>
                    <retireJsAnalyzerEnabled>false</retireJsAnalyzerEnabled>
                </configuration>
                <executions>
                    <execution>
                        <id>dependency-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</profile>
```

### Add static analysis profile to execute pmd & spotbugs

**When to use**: Only if static code analysis is selected.
**User question**: "Do you want static code analysis (SpotBugs, PMD)? (y/n)"

Nature: General
Category: Static Analysis

Update the pom.xml with this profile

```xml
<profile>
    <id>find-bugs</id>
    <activation>
        <activeByDefault>false</activeByDefault>
    </activation>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${maven-plugin-pmd.version}</version>
            </plugin>
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>${maven-plugin-spotbugs.version}</version>
                <configuration>
                    <effort>Max</effort>
                    <threshold>Low</threshold>
                    <failOnError>true</failOnError>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <!-- SpotBugs reporting for Maven site -->
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>${maven-plugin-spotbugs.version}</version>
                <configuration>
                    <effort>Max</effort>
                    <threshold>Low</threshold>
                    <includeFilterFile>src/main/spotbugs/spotbugs-include.xml</includeFilterFile>
                    <excludeFilterFile>src/main/spotbugs/spotbugs-exclude.xml</excludeFilterFile>
                </configuration>
            </plugin>
            <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-pmd-plugin</artifactId>
            <version>${maven-plugin-pmd.version}</version>
            </plugin>
        </plugins>
    </reporting>
</profile>
```

### Add sonar profile to execute sonar

Nature: General
Category: Quality

```xml
<profile>
    <id>sonar</id>
    <activation>
        <activeByDefault>false</activeByDefault>
    </activation>
    <properties>
        <!-- SonarCloud configuration -->
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.organization>YOUR_GITHUB_USER</sonar.organization>
        <sonar.projectKey>YOUR_GITHUB_USER_REPOSITORY_NAME</sonar.projectKey>
        <sonar.projectName>YOUR_PROJECT_NAME</sonar.projectName>
        <sonar.projectVersion>${project.version}</sonar.projectVersion>
        <sonar.sources>src/main/java</sonar.sources>
        <sonar.tests>src/test/java</sonar.tests>
        <sonar.java.binaries>target/classes</sonar.java.binaries>
        <sonar.java.test.binaries>target/test-classes</sonar.java.test.binaries>
        <sonar.jacoco.reportPath>target/jacoco.exec</sonar.jacoco.reportPath>
        <sonar.junit.reportPaths>target/surefire-reports</sonar.junit.reportPaths>
        <sonar.coverage.exclusions>**/*Test.java,**/*IT.java</sonar.coverage.exclusions>
        <sonar.java.source>${java.version}</sonar.java.source>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${maven-plugin-sonar.version}</version>
            </plugin>
        </plugins>
    </build>
</profile>
```
                    ```

                    After getting answers, implement the configuration following this order:

                    **Reference**: For detailed properties configuration strategy and conditional logic, see the template file.

                    ```markdown
                    # Java Maven Properties Configuration

## Properties Configuration Strategy

Build properties incrementally based on user's actual needs and project requirements. This template provides a comprehensive, conversational approach to configuring Maven properties.

## Core Properties (Always Added)

Start with essential build properties that every project needs (use the Java version selected in the initial questions):

```xml
<properties>
  <java.version>[USER_SELECTED_JAVA_VERSION]</java.version>
  <maven.version>3.9.10</maven.version>
  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>  
</properties>
```

## Maven Version and Plugin Properties (Conditional)

**Ask**: "Do you want to enforce specific Maven and plugin versions for build consistency? (y/n)"

**If yes, add**:
```xml
<maven-plugin-compiler.version>3.14.0</maven-plugin-compiler.version>
<maven-plugin-surefire.version>3.5.3</maven-plugin-surefire.version>
<maven-plugin-enforcer.version>3.5.0</maven-plugin-enforcer.version>
```

## Dependency Version Properties (Conditional)

**Based on dependency selections**, add relevant version properties:

### Code Quality Dependencies
**If JSpecify selected**:
```xml
<jspecify.version>1.0.0</jspecify.version>
```

## Quality and Analysis Properties (Conditional)

**Ask**: "Do you want to configure quality thresholds for code coverage and analysis? (y/n)"

**If yes, ask for specific thresholds**:
- "What minimum code coverage percentage do you want? (default: 80%)"
- "What minimum mutation testing score do you want? (default: 70%)"

**Add based on answers**:
```xml
<!-- Quality thresholds -->
<coverage.level>[USER_SPECIFIED_COVERAGE]</coverage.level>
<mutation.level>[USER_SPECIFIED_MUTATION]</mutation.level>
```

## Additional Plugin Version Properties (Feature-Based)

**Only add plugin version properties for selected features**:

### Static Analysis
**If Format source code selected**:
```xml
<maven-plugin-spotless.version>2.44.5</maven-plugin-spotless.version>
```

### Integration Testing
**If Integration Testing selected**:
```xml
<maven-plugin-failsafe.version>3.5.3</maven-plugin-failsafe.version>
```

### Code Coverage
**If Code Coverage selected**:
```xml
<maven-plugin-jacoco.version>0.8.13</maven-plugin-jacoco.version>
<maven-plugin-jxr.version>3.6.0</maven-plugin-jxr.version>
```

### Mutation Testing
**If Mutation Testing selected**:
```xml
<maven-plugin-pitest.version>1.19.4</maven-plugin-pitest.version>
<maven-plugin-pitest-junit5.version>1.2.3</maven-plugin-pitest-junit5.version>
```

### Security Scanning
**If Security Scanning selected**:
```xml
<maven-plugin-dependency-check.version>12.1.1</maven-plugin-dependency-check.version>
```

### Static Analysis
**If Static Analysis selected**:
```xml
<maven-plugin-spotbugs.version>4.9.3.0</maven-plugin-spotbugs.version>
<maven-plugin-pmd.version>3.26.0</maven-plugin-pmd.version>
<maven-plugin-sonar.version>4.0.0.4121</maven-plugin-sonar.version>
```

### Enhanced Compiler Analysis
**If Enhanced Code Analysis selected**:
```xml
<error-prone.version>2.38.0</error-prone.version>
<nullaway.version>0.11.0</nullaway.version>
<extra-enforcer-rules.version>1.10.0</extra-enforcer-rules.version>
```

### Version Management
**If Version Management selected**:
```xml
<maven-plugin-versions.version>2.18.0</maven-plugin-versions.version>
```

### Build Info
**If Build Info selected**:
```xml
<maven-plugin-git-commit-id.version>4.9.10</maven-plugin-git-commit-id.version>
```

### Library Publishing
**If Library Publishing selected**:
```xml
<maven-plugin-flatten.version>1.7.0</maven-plugin-flatten.version>
```

### Site and Reporting
**If Site Generation selected**:
```xml
<maven-plugin-site.version>3.20.0</maven-plugin-site.version>
<maven-plugin-project-info-reports.version>3.7.0</maven-plugin-project-info-reports.version>
```

### SonarQube Integration
**If SonarQube Integration selected**:
```xml
<maven-plugin-sonar.version>4.0.0.4121</maven-plugin-sonar.version>
```

## Final Properties Structure Example

The final `<properties>` section will look like this (example with common selections):

```xml
<properties>
  <java.version>24</java.version> 
  <maven.version>3.9.10</maven.version>
  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

  <!-- Dependency versions (based on selections) -->
  <jspecify.version>1.0.0</jspecify.version>

  <!-- Feature-specific plugin versions (based on selections) -->
  <maven-plugin-compiler.version>3.14.0</maven-plugin-compiler.version>
  <error-prone.version>2.38.0</error-prone.version>
  <nullaway.version>0.11.0</nullaway.version>
  <maven-plugin-surefire.version>3.5.3</maven-plugin-surefire.version>
  <maven-plugin-enforcer.version>3.5.0</maven-plugin-enforcer.version>
  <maven-plugin-jacoco.version>0.8.13</maven-plugin-jacoco.version>
  <maven-plugin-pitest.version>1.19.4</maven-plugin-pitest.version>
  <maven-plugin-pitest-junit5.version>1.2.3</maven-plugin-pitest-junit5.version>
  <maven-plugin-spotbugs.version>4.9.3.0</maven-plugin-spotbugs.version>

  <!-- Quality thresholds (if configured) -->
  <coverage.level>80</coverage.level>
  <mutation.level>70</mutation.level>
</properties>
```

## Implementation Guidelines

1. **Build incrementally**: Start with core properties and add only what's needed
2. **Ask before adding**: Don't include properties for unselected features
3. **Customize versions**: Use the Java version and thresholds specified by the user
4. **Group logically**: Keep related properties together with comments
5. **Use descriptive names**: Property names should clearly indicate their purpose
6. **Version consistency**: Ensure compatible versions across related plugins
                    ```

                    **Summary**: Build properties incrementally based on user's actual needs and project requirements. The template provides comprehensive guidance on:
                    - Core properties (always added)
                    - Maven version and plugin properties (conditional)
                    - Dependency version properties (based on selections)
                    - Quality and analysis properties (with custom thresholds)
                    - Feature-specific plugin version properties
                    - Implementation guidelines

                    **Dependency Strategy**: Add only essential dependencies that enhance code quality and safety.

                    **Reference**: For specific dependency configurations, see the template file.

                    ```markdown
                    # Java Maven Dependencies

This template provides Maven dependency configurations that should be added conditionally based on user selections from the main Maven dependencies and plugins rule.

**Usage**: Reference this template from the main rule rather than duplicating configurations.

## Code Quality Dependencies

### Add JSpecify for Null Safety

**When to use**: Recommended for all projects to improve null safety and code documentation.
**User question**: "Do you want to use JSpecify nullness annotations for better null safety? (y/n)"

**Benefits of JSpecify**:
- Provides standardized nullness annotations (@Nullable, @NonNull)
- Improves code safety and documentation
- Works with static analysis tools like NullAway and Error Prone
- Compile-time only dependency (scope: provided)
- Better tooling support compared to legacy JSR-305

Update the pom.xml with this dependency:

```xml
<dependencies>
  <!-- Null Safety Annotations -->
  <dependency>
    <groupId>org.jspecify</groupId>
    <artifactId>jspecify</artifactId>
    <version>${jspecify.version}</version>
    <scope>provided</scope>
  </dependency>
</dependencies>
```

**If JSpecify selected**:
```xml
<!-- Dependency versions -->
<jspecify.version>1.0.0</jspecify.version>
```

**Usage Example**:
```java
import org.jspecify.annotations.Nullable;
import org.jspecify.annotations.NonNull;

public class Example {
    public @Nullable String processInput(@NonNull String input) {
        if (input.isEmpty()) {
            return null; // Explicitly nullable return
        }
        return input.toUpperCase();
    }
}
```
                    ```

                    - **JSpecify**: Nullness annotations for improved null safety

                    #### Implementation Approach:
                    1. **Ask about code quality dependencies**: Follow the questions in the template file
                    2. **Add only selected dependencies**: Don't include dependencies the user doesn't need
                    3. **Configure with appropriate scope**: Use `provided` scope for compile-time only dependencies

                    **Plugin Configuration Strategy**: Add plugins based only on selected features and user needs.

                    **Reference**: For specific plugin configurations, see the template file.

                    **Core Plugins** (ask if user wants enhanced enforcement):
                    - **maven-compiler-plugin**: Enhanced with Error Prone and NullAway analysis
                    - **maven-enforcer-plugin**: With dependency convergence and circular dependency checks
                    - **maven-surefire-plugin**: For unit testing with proper configuration

                    **Feature-Based Plugins** (add only if selected):
                    - **Integration Testing**: maven-failsafe-plugin
                    - **Code Coverage**: jacoco-maven-plugin (in profile)
                    - **Mutation Testing**: pitest-maven (in profile)
                    - **Security Scanning**: dependency-check-maven (in profile)
                    - **Static Analysis**: spotbugs-maven-plugin, maven-pmd-plugin (in profile) & sonar (in profile)
                    - **Version Management**: versions-maven-plugin
                    - **Build Info**: git-commit-id-plugin
                    - **Library Publishing**: flatten-maven-plugin

                    1. **Ask about enhancement level**: "Do you want enhanced code analysis (Error Prone, NullAway)? (y/n)"
                    2. **Add core plugins** based on enhancement choice
                    3. **Add feature plugins** only for selected features
                    4. **Configure profiles** for optional analysis tools
                    5. **Customize package names** in plugin configurations

                    **Profile Strategy**: Create profiles only for selected optional features to avoid overwhelming the default build.

                    **Reference**: For specific profile configurations, see the template file.

                    **Available Profiles** (add only if features selected):
                    - `jacoco`: Code coverage analysis
                    - `pitest`: Mutation testing
                    - `security`: OWASP dependency security scanning
                    - `find-bugs`: Static analysis with SpotBugs and PMD

                
#### Step Constraints

- **MUST NOT** deviate from template specifications
- **MUST** use `maven-plugins-*` format for property naming (e.g., `maven-plugins-compiler.version`, NOT `maven-compiler-plugin.version`)
- **MUST** include ALL Error Prone and NullAway options as specified in template
- **MUST** include `-Xlint:all` and `-Werror` compiler arguments
- **MUST** include `--should-stop=ifError=FLOW` configuration
- **MUST** include full NullAway configuration with `JSpecifyMode=true`, `TreatGeneratedAsUnannotated=true`, etc.
- **MUST** include `extra-enforcer-rules` dependency and all specified rules in enforcer plugin
- **MUST** follow template's `<build>` vs `<reporting>` section separation for profiles
- **MUST** create `.mvn/jvm.config` when Error Prone is enabled
- **MUST** update `AnnotatedPackages` and `targetClasses` to match actual project structure
- **MUST** ensure template adherence is mandatory - no exceptions or simplified versions allowed

### Step 4: Profile Usage Examples

Only provide examples for profiles that were actually added based on user selections.

## Output Format

- Ask questions one by one following the template exactly
- Wait for user responses before proceeding
- Implement only requested features based on user selections
- Follow template specifications exactly for all configurations
- Validate configuration after implementation
- Provide usage examples only for features that were added

## Safeguards

- Verify changes with the command: `mvn validate` or `./mvnw validate`
- Always read template files fresh using file_search and read_file tools
- Never proceed without user confirmation for each step
- Template adherence is mandatory - no exceptions or simplified versions