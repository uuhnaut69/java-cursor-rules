<?xml version="1.0" encoding="UTF-8"?>
<prompt xmlns:xi="http://www.w3.org/2001/XInclude">

    <metadata>
        <author>Juan Antonio Bre√±a Moral</author>
        <version>0.11.0-SNAPSHOT</version>
        <title>Java Documentation Generator with modular step-based configuration</title>
    </metadata>

    <role>You are a Senior software engineer with extensive experience in Java software development and technical documentation</role>

    <goal>
        This rule provides a modular, step-based approach to generating comprehensive Java project documentation
        including README.md files, package-info.java files, and Javadoc.
        Each step has a single responsibility and clear dependencies on user answers, making the documentation process more maintainable and user-friendly.
    </goal>

    <constraints>
        <constraints-description>
            Before applying documentation generation, ensure the project is in a valid state by running Maven validation.
            This helps identify any existing issues that need to be resolved first.
        </constraints-description>
        <constraint-list>
            <constraint>**MANDATORY**: Run `./mvnw validate` or `mvn validate` before applying any documentation generation</constraint>
            <constraint>**VERIFY**: Ensure all validation errors are resolved before proceeding with documentation generation</constraint>
            <constraint>**PREREQUISITE**: Project must compile and pass basic validation checks before documentation</constraint>
            <constraint>**CRITICAL SAFETY**: If validation fails, IMMEDIATELY STOP and DO NOT CONTINUE with any documentation steps. Ask the user to fix ALL validation errors first before proceeding</constraint>
            <constraint>**ENFORCEMENT**: Never proceed to Step 1 or any subsequent steps if `mvn validate` or `./mvnw validate` command fails or returns errors</constraint>
        </constraint-list>
    </constraints>

    <instructions>
        <steps>
            <step number="1">
                <step-title>Documentation Preferences Assessment</step-title>
                <step-content>
                    **IMPORTANT**: Ask these questions to understand the documentation requirements before generating any documentation. Based on the answers, you will conditionally execute only relevant subsequent steps.

                    ```markdown
                    <xi:include href="fragments/java-documentation-questions-template.md" parse="text"/>
                    ```
                </step-content>
                <step-constraints>
                    <step-constraint-list>
                        <step-constraint>**GLOBAL ORDERING**: The first user-facing question in this rule MUST be the template's "Question 1: What do you want to generate?" asked at the start of Step 1</step-constraint>
                        <step-constraint>**DEPENDENCIES**: None</step-constraint>
                        <step-constraint>**CRITICAL**: You MUST ask the exact questions from the template in strict order for documentation path only</step-constraint>
                        <step-constraint>**MUST** read template files fresh using file_search and read_file tools before asking questions</step-constraint>
                        <step-constraint>**MUST NOT** use cached or remembered questions from previous interactions</step-constraint>
                        <step-constraint>**MUST** ask questions ONE BY ONE in the exact order specified in the template</step-constraint>
                        <step-constraint>**MUST** WAIT for user response to each question before proceeding to the next</step-constraint>
                        <step-constraint>**MUST** use the EXACT wording from the template questions</step-constraint>
                        <step-constraint>**MUST** present the EXACT options listed in the template</step-constraint>
                        <step-constraint>**MUST NOT** ask all questions simultaneously</step-constraint>
                        <step-constraint>**MUST NOT** assume answers or provide defaults</step-constraint>
                        <step-constraint>**MUST NOT** skip questions or change their order, except when a question becomes inapplicable due to a prior "Skip" selection</step-constraint>
                        <step-constraint>**MUST** confirm understanding of user selections before proceeding to Step 2</step-constraint>
                        <step-constraint>**GUARD**: If any non-template question was asked earlier by mistake, RESTART the question flow from "Question 1" and ignore prior answers</step-constraint>
                        <step-constraint>**FOCUS**: Only ask documentation-related questions, skip any diagram-related questions from the template</step-constraint>
                    </step-constraint-list>
                </step-constraints>
            </step>
            <step number="2">
                <step-title>README.md Generation</step-title>
                <step-content>
**Purpose**: Generate comprehensive README.md files based on project structure and user preferences.

**Dependencies**: Only execute if user selected README.md generation in Step 1. Requires completion of Step 1.

**CONDITIONAL EXECUTION**: Only execute this step if user selected "README.md", "Both README.md and package-info.java files", or "All options: README.md, package-info.java &amp; Javadoc files" in Step 1.

## Implementation Strategy

Use the following template and guidelines:

<xi:include href="fragments/java-documentation-implementation-template.md" parse="text"/>

## Single Module Project Implementation

**For single module projects:**

1. **Analyze the src/main/java directory** using codebase_search to understand:
   - Main application classes and entry points
   - Package structure and organization
   - Key business logic and functionality
   - Framework usage (Spring, etc.)
   - Dependencies and integrations

2. **Generate comprehensive README.md** in project root with:
   - **Software Description section**: Detailed analysis of the codebase functionality
   - **Getting Started section**: Build and run instructions
   - **Configuration section**: If config files detected
   - **API Documentation section**: If REST controllers found
   - **Additional sections**: Based on user preferences from Step 1

## Multi-Module Project Implementation

**For multi-module Maven projects:**

1. **Generate root README.md** with:
   - High-level project overview
   - Module descriptions and links
   - Common build instructions
   - Project-wide configuration

2. **Generate module-specific README.md files** for each module:
   - Module-specific software description
   - Module's role in the larger project
   - Module-specific build and usage instructions
   - Dependencies specific to that module

## File Handling Strategy

**Based on user selection in Step 1:**

- **Overwrite**: Replace existing README.md completely (after creating backup)
- **Add new information**: Intelligently merge with existing content, adding missing sections
- **Create backup**: Save original as README.md.backup before modifying
- **Skip files**: Only generate README.md if it doesn't already exist

## Content Quality Requirements

1. **Software Description must be comprehensive and accurate**
2. **Include practical examples and usage patterns** if user requested
3. **Follow chosen documentation style** (Professional/Developer-friendly/Minimal/Educational)
4. **Ensure all generated content is technically accurate**
5. **Include appropriate Maven commands and build instructions**

## Validation

After generating README.md files, verify they contain:
- Accurate software description based on code analysis
- Correct build and run instructions
- Proper formatting and structure
- No placeholder text or generic content
                </step-content>
                <step-constraints>
                    <step-constraint-list>
                        <step-constraint>**MUST** only execute if README.md generation was selected in Step 1</step-constraint>
                        <step-constraint>**MUST** use codebase_search extensively to understand project functionality</step-constraint>
                        <step-constraint>**MUST** generate accurate and comprehensive software descriptions</step-constraint>
                        <step-constraint>**MUST** follow user's file handling preference from Step 1</step-constraint>
                        <step-constraint>**MUST** create backups if overwriting existing files</step-constraint>
                        <step-constraint>**MUST** respect documentation style preference from Step 1</step-constraint>
                        <step-constraint>**MUST** read implementation template fresh using file_search and read_file tools</step-constraint>
                        <step-constraint>**MUST NOT** use generic or placeholder content</step-constraint>
                        <step-constraint>**MUST** validate that generated content accurately reflects the codebase</step-constraint>
                    </step-constraint-list>
                </step-constraints>
            </step>
            <step number="3">
                <step-title>package-info.java Generation</step-title>
                <step-content><![CDATA[
**Purpose**: Generate comprehensive package-info.java files for all packages based on code analysis and user preferences.

**Dependencies**: Only execute if user selected package-info.java generation in Step 1. Requires completion of Step 1.

**CONDITIONAL EXECUTION**: Only execute this step if user selected "package-info.java files", "Both README.md and package-info.java files", or "All options: README.md, package-info.java & Javadoc files" in Step 1.

## Implementation Strategy

1. **Identify all packages** in src/main/java across all modules
2. **Analyze each package** to understand its purpose and contents
3. **Generate appropriate package-info.java** based on user's detail level preference
4. **Handle existing files** according to user's file handling strategy

## Package Analysis Process

**For each package found:**

1. **Scan package contents** using codebase_search:
   - Identify all classes in the package
   - Understand class responsibilities and relationships
   - Detect design patterns and architectural roles
   - Identify main public APIs and entry points

2. **Categorize package purpose**:
   - Application entry points
   - Business logic/domain models
   - Data access/repositories
   - Web controllers/REST APIs
   - Utilities/helpers
   - Configuration classes
   - External integrations

3. **Generate documentation level** based on user preference:

### Basic Level
```java
/**
 * [Package name] - [Brief description of package purpose]
 *
 * This package contains [main functionality description].
 * Key classes: [list main classes with brief descriptions]
 */
package [package.name];
```

### Detailed Level
```java
/**
 * [Package name] - [Comprehensive description]
 *
 * <h2>Purpose</h2>
 * [Detailed explanation of what this package does and its role in the application]
 *
 * <h2>Main Components</h2>
 * <ul>
 * <li>{@link ClassName1} - [Description of purpose and key responsibilities]</li>
 * <li>{@link ClassName2} - [Description of purpose and key responsibilities]</li>
 * </ul>
 *
 * <h2>Usage Example</h2>
 * <pre>{@code
 * // Example code showing typical usage pattern
 * }</pre>
 *
 * <h2>Dependencies</h2>
 * [Description of key external dependencies this package uses]
 *
 * @since [version if available]
 * @author [author info if available from git or existing docs]
 */
package [package.name];
```

### Minimal Level
```java
/**
 * [Brief one-line description of package purpose and main functionality].
 */
package [package.name];
```

## File Handling Strategy

**Based on user selection in Step 1:**

- **Overwrite**: Replace existing package-info.java completely (after creating backup)
- **Add new information**: Enhance existing package-info.java by adding missing documentation elements
- **Create backup**: Save original as package-info.java.backup before modifying
- **Skip files**: Only generate package-info.java if it doesn't already exist in the package

## Content Quality Requirements

1. **Each package description must accurately reflect the package's actual purpose**
2. **Include references to main public classes using {@link} tags**
3. **Provide practical usage examples for detailed level**
4. **Use proper Javadoc formatting and tags**
5. **Ensure descriptions are written for software engineers to easily understand**

## Implementation Guidelines

1. **Process packages in logical order** (e.g., main application packages first, then utilities)
2. **Use consistent documentation style** across all packages
3. **Ensure cross-references between related packages when appropriate**
4. **Include package relationships and dependencies in descriptions**
5. **Validate that all generated package-info.java files compile correctly**

## Validation

After generating package-info.java files:
- Verify proper Javadoc syntax
- Ensure all class references are valid
- Check that package declarations match directory structure
- Confirm documentation accurately describes package contents
                ]]>
                </step-content>
                <step-constraints>
                    <step-constraint-list>
                        <step-constraint>**MUST** only execute if package-info.java generation was selected in Step 1</step-constraint>
                        <step-constraint>**MUST** analyze every package in src/main/java comprehensively</step-constraint>
                        <step-constraint>**MUST** generate accurate descriptions that reflect actual package purpose</step-constraint>
                        <step-constraint>**MUST** follow user's detail level preference from Step 1</step-constraint>
                        <step-constraint>**MUST** follow user's file handling preference from Step 1</step-constraint>
                        <step-constraint>**MUST** use proper Javadoc formatting and syntax</step-constraint>
                        <step-constraint>**MUST** create backups if overwriting existing files</step-constraint>
                        <step-constraint>**MUST** include valid {@link} references to main classes</step-constraint>
                        <step-constraint>**MUST** ensure all generated files compile without errors</step-constraint>
                        <step-constraint>**MUST NOT** use generic or templated descriptions</step-constraint>
                    </step-constraint-list>
                </step-constraints>
            </step>
            <step number="4">
                <step-title>Javadoc Generation Enhancement</step-title>
                <step-content><![CDATA[
**Purpose**: Enhance existing Javadoc comments and generate comprehensive Javadoc documentation for public APIs based on code analysis and user preferences.

**Dependencies**: Only execute if user selected Javadoc enhancement in Step 1. Requires completion of Step 1.

**CONDITIONAL EXECUTION**: Only execute this step if user selected "Javadoc enhancement" or "All options: README.md, package-info.java & Javadoc files" in Step 1.

## Implementation Strategy

1. **Identify classes and methods** that need Javadoc enhancement
2. **Analyze existing documentation** to understand current state
3. **Generate comprehensive Javadoc** based on user's detail level preference
4. **Handle existing documentation** according to user's file handling strategy

## Javadoc Analysis Process

**For each Java file found:**

1. **Scan for missing or incomplete Javadoc**:
   - Public classes without class-level documentation
   - Public methods without method documentation
   - Parameters without @param tags
   - Return values without @return tags
   - Exceptions without @throws tags

2. **Analyze method signatures and implementations**:
   - Understand method purpose from implementation
   - Identify parameters and their roles
   - Determine return value meanings
   - Identify checked and unchecked exceptions

3. **Generate documentation level** based on user preference:

### Basic Level
```java
/**
 * [Brief description of class/method purpose].
 * 
 * @param paramName [parameter description]
 * @return [return value description]
 * @throws ExceptionType [exception description]
 */
```

### Detailed Level
```java
/**
 * [Comprehensive description of class/method purpose and behavior].
 * 
 * <p>[Additional context about usage patterns, side effects, or important considerations]
 * 
 * <h3>Usage Example:</h3>
 * <pre>{@code
 * // Example code showing typical usage
 * }</pre>
 * 
 * @param paramName [detailed parameter description with constraints and expectations]
 * @return [detailed return value description with possible values and meanings]
 * @throws ExceptionType [detailed exception description with conditions that trigger it]
 * @since [version if available]
 * @see [related classes or methods]
 */
```

### Minimal Level
```java
/**
 * [One-line description of purpose].
 * @param paramName [brief parameter description]
 * @return [brief return description]
 */
```

## File Handling Strategy

**Based on user selection in Step 1:**

- **Overwrite**: Replace existing Javadoc completely (after creating backup)
- **Add new information**: Enhance existing Javadoc by adding missing tags and descriptions
- **Create backup**: Save original files with .backup extension before modifying
- **Skip files**: Only add Javadoc where none exists

## Content Quality Requirements

1. **Each Javadoc comment must accurately describe the actual method/class behavior**
2. **Include all necessary @param, @return, and @throws tags**
3. **Provide practical usage examples for complex methods**
4. **Use proper Javadoc formatting and HTML tags**
5. **Ensure descriptions help other developers understand the API**

## Implementation Guidelines

1. **Focus on public and protected APIs first**
2. **Use consistent documentation style across all classes**
3. **Include cross-references using {@link} tags when appropriate**
4. **Document preconditions, postconditions, and side effects**
5. **Validate that all generated Javadoc compiles and renders correctly**

## Validation

After enhancing Javadoc:
- Verify proper Javadoc syntax and HTML formatting
- Ensure all @param tags match actual parameters
- Check that @return tags are present for non-void methods
- Confirm @throws tags match declared exceptions
- Validate that Javadoc generation works: `./mvnw javadoc:javadoc`
                ]]>
                </step-content>
                <step-constraints>
                    <step-constraint-list>
                        <step-constraint>**MUST** only execute if Javadoc enhancement was selected in Step 1</step-constraint>
                        <step-constraint>**MUST** analyze all public and protected APIs comprehensively</step-constraint>
                        <step-constraint>**MUST** generate accurate descriptions that reflect actual method behavior</step-constraint>
                        <step-constraint>**MUST** follow user's detail level preference from Step 1</step-constraint>
                        <step-constraint>**MUST** follow user's file handling preference from Step 1</step-constraint>
                        <step-constraint>**MUST** use proper Javadoc formatting and syntax</step-constraint>
                        <step-constraint>**MUST** create backups if overwriting existing documentation</step-constraint>
                        <step-constraint>**MUST** include all necessary @param, @return, and @throws tags</step-constraint>
                        <step-constraint>**MUST** ensure all generated Javadoc compiles without errors</step-constraint>
                        <step-constraint>**MUST** validate Javadoc generation with `./mvnw javadoc:javadoc`</step-constraint>
                        <step-constraint>**MUST NOT** use generic or templated descriptions</step-constraint>
                    </step-constraint-list>
                </step-constraints>
            </step>
            <step number="5">
                <step-title>Documentation Validation and Summary</step-title>
                <step-content><![CDATA[
**Purpose**: Validate all generated documentation and provide a comprehensive summary of changes made.

**Dependencies**: Requires completion of applicable steps (2, 3, and/or 4 based on user selections).

## Validation Process

1. **Compile Validation**:
```bash
# Validate that all package-info.java files compile correctly
./mvnw clean compile
```

2. **Javadoc Validation**:
```bash
# Validate that all Javadoc generates correctly
./mvnw javadoc:javadoc
```

3. **Content Validation**:
- Verify README.md files have proper markdown formatting
- Ensure all links and references are valid
- Check that software descriptions accurately reflect the codebase
- Validate that Javadoc in package-info.java files is syntactically correct

4. **Consistency Validation**:
- Ensure consistent documentation style across all generated files
- Verify that cross-references between files are accurate
- Check that naming conventions are followed

## Summary Report

**Generate a comprehensive summary including:**

### Files Modified/Created:
- **README.md files**: [List locations and actions taken]
- **package-info.java files**: [List packages and actions taken]
- **Javadoc enhancements**: [List classes and methods enhanced]
- **Backup files**: [List any backup files created]

### Content Generated:
- **Software descriptions**: [Summary of main functionality documented]
- **Package documentation**: [Count and brief overview of packages documented]
- **API documentation**: [Count and types of methods/classes documented]
- **Additional sections**: [Any additional sections added like Getting Started, API docs, etc.]

### Actions Taken:
- **New files created**: [Count and list]
- **Existing files modified**: [Count and list with action taken]
- **Files skipped**: [Count and reasoning]
- **Backup files created**: [Count and list]

### Usage Instructions:
```bash
# To view generated documentation
ls -la README.md
find . -name "package-info.java" -type f
find . -name "*.java" -exec grep -l "/**" {} \;

# To validate compilation
./mvnw clean compile

# To generate Javadoc HTML
./mvnw javadoc:javadoc

# To regenerate documentation with different settings
# Re-run this cursor rule with different preferences
```

### Next Steps Recommendations:
- Review generated documentation for accuracy and completeness
- Consider adding project-specific details that couldn't be auto-generated
- Update documentation as code evolves
- Consider integrating documentation generation into CI/CD pipeline
- Set up automated Javadoc generation and publishing

## Final Validation

Run final validation to ensure project builds successfully:

```bash
./mvnw clean verify
```

If validation passes, documentation generation is complete and successful.
                ]]></step-content>
                <step-constraints>
                    <step-constraint-list>
                        <step-constraint>**MUST** run `./mvnw clean compile` to validate package-info.java files</step-constraint>
                        <step-constraint>**MUST** run `./mvnw javadoc:javadoc` to validate Javadoc generation</step-constraint>
                        <step-constraint>**MUST** provide comprehensive summary of all changes made</step-constraint>
                        <step-constraint>**MUST** validate markdown formatting in README.md files</step-constraint>
                        <step-constraint>**MUST** ensure Javadoc syntax is correct in all enhanced files</step-constraint>
                        <step-constraint>**MUST** document what files were created, modified, or skipped</step-constraint>
                        <step-constraint>**MUST** provide clear usage instructions for accessing generated documentation</step-constraint>
                        <step-constraint>**MUST** run final `./mvnw clean verify` to ensure project builds successfully</step-constraint>
                    </step-constraint-list>
                </step-constraints>
            </step>
        </steps>
    </instructions>

    <output-format>
        <output-format-list>
            <output-format-item>Ask documentation questions one by one following the template exactly in Step 1</output-format-item>
            <output-format-item>Execute steps 2-4 only based on user selections from Step 1</output-format-item>
            <output-format-item>Skip entire steps if no relevant documentation types were selected</output-format-item>
            <output-format-item>Generate only requested documentation types based on user selections</output-format-item>
            <output-format-item>Follow template specifications exactly for all documentation generation</output-format-item>
            <output-format-item>Provide clear progress feedback showing which step is being executed</output-format-item>
            <output-format-item>Provide comprehensive summary of all documentation generated</output-format-item>
        </output-format-list>
    </output-format>

    <safeguards>
        <safeguards-list>
            <safeguards-item>**NEVER remove or replace existing documentation** without explicit user consent and backup</safeguards-item>
            <safeguards-item>**ASK USER before overriding** any existing documentation files</safeguards-item>
            <safeguards-item>**CREATE BACKUPS** when overwriting existing files</safeguards-item>
            <safeguards-item>Verify changes with the command: `mvn compile` for package-info.java validation</safeguards-item>
            <safeguards-item>Verify changes with the command: `mvn javadoc:javadoc` for Javadoc validation</safeguards-item>
            <safeguards-item>Always read template files fresh using file_search and read_file tools</safeguards-item>
            <safeguards-item>Never proceed to next step without completing dependencies</safeguards-item>
            <safeguards-item>Template adherence is mandatory - no exceptions or simplified versions</safeguards-item>
            <safeguards-item>Generate accurate content based on actual code analysis, not generic templates</safeguards-item>
            <safeguards-item>**DOCUMENT what was generated vs what was preserved** in the final summary</safeguards-item>
            <safeguards-item>Ensure all generated package-info.java files compile without errors</safeguards-item>
            <safeguards-item>Validate markdown formatting in all generated README.md files</safeguards-item>
            <safeguards-item>Ensure all enhanced Javadoc is syntactically correct and generates properly</safeguards-item>
        </safeguards-list>
    </safeguards>
</prompt>