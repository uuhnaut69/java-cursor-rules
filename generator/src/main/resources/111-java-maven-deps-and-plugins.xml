<?xml version="1.0" encoding="UTF-8"?>
<prompt xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xsi:noNamespaceSchemaLocation="pml.xsd"
        id="111-java-maven-deps-and-plugins" version="1.0">

    <metadata>
        <cursor-ai>
            <description></description>
            <globs></globs>
            <always-apply>false</always-apply>
        </cursor-ai>
        <tags>
            <tag>maven</tag>
            <tag>java</tag>
            <tag>dependencies</tag>
            <tag>plugins</tag>
            <tag>best-practices</tag>
        </tags>
        <version>0.8.0</version>
        <title>Update pom.xml to add Maven dependencies and plugins</title>
    </metadata>

    <role>You are a Senior software engineer with extensive experience in Java software development</role>

    <goal>
        This rule provides a comprehensive, conversational approach to updating Maven pom.xml files with properties, dependencies, plugins, and profiles. It MUST ask questions first to understand the project needs and then conditionally add only relevant components.
    </goal>

    <instructions>
        <steps>
            <step number="1">
                <step-title>Maven Wrapper Check and Installation</step-title>
                <step-content>
                    **First, check for Maven Wrapper files** in the project root
                    - Look for `mvnw` (Unix/Mac) and `mvnw.cmd` (Windows) files
                    - Check for `.mvn/wrapper/` directory with `maven-wrapper.properties`

                    **If Maven Wrapper is NOT present:**

                    **STOP HERE** and ask the user: "I notice this project doesn't have Maven Wrapper configured.
                    The Maven Wrapper ensures everyone uses the same Maven version, improving build consistency across different environments.
                    Would you like me to install it? (y/n)"

                    **WAIT for the user's response. Do NOT proceed to any other questions or steps until this is resolved.**

                    if the user says "y", then install the Maven Wrapper.

                    ```bash
                    mvn wrapper:wrapper
                    ```

                </step-content>
            </step>
            <step number="2">
                <step-title>Project Assessment Questions</step-title>
                <step-content>
                    **CRITICAL**: You MUST ask the exact questions from the following template in strict order before making any changes to understand the project needs.
                    Based on the answers, you will conditionally add only relevant dependencies and plugins.

                    ```markdown
                    <xi:include href="fragments/java-maven-questions-template.md" parse="text"/>
                    ```
                </step-content>
                <step-constraints>
                    <step-constraint-list>
                        <step-constraint>**MUST** read template files fresh using file_search and read_file tools before asking any questions</step-constraint>
                        <step-constraint>**MUST NOT** use cached or remembered questions from previous interactions</step-constraint>
                        <step-constraint>**MUST** ask questions ONE BY ONE in the exact order specified in the template</step-constraint>
                        <step-constraint>**MUST** WAIT for user response to each question before proceeding to the next</step-constraint>
                        <step-constraint>**MUST** use the EXACT wording from the template questions</step-constraint>
                        <step-constraint>**MUST** present the EXACT options listed in the template</step-constraint>
                        <step-constraint>**MUST** include recommendations when specified in the template</step-constraint>
                        <step-constraint>**MUST NOT** ask all questions simultaneously</step-constraint>
                        <step-constraint>**MUST NOT** assume answers or provide defaults</step-constraint>
                        <step-constraint>**MUST NOT** skip questions or change their order</step-constraint>
                        <step-constraint>**MUST** follow question sequence: Project Nature → Java Version → Build and Quality Aspects → Coverage Threshold (conditional) → Sonar Configuration (conditional) → Sonar Host Configuration (conditional)</step-constraint>
                        <step-constraint>**MUST** verify that ALL options from the template are included before asking questions</step-constraint>
                        <step-constraint>**MUST** cross-check question content against the freshly read template file</step-constraint>
                        <step-constraint>**MUST** re-read the template and correct questions if there are discrepancies</step-constraint>
                        <step-constraint>**MUST** STOP and verify all applicable questions have been answered</step-constraint>
                        <step-constraint>**MUST NOT** proceed to Step 3 until complete responses received</step-constraint>
                        <step-constraint>**MUST** confirm understanding of user selections before implementation</step-constraint>
                        <step-constraint>**MUST NOT** ask about Coverage Threshold if user did not select jacoco coverage</step-constraint>
                    </step-constraint-list>
                </step-constraints>
            </step>
            <step number="3">
                <step-title>Conditional Configuration Based on Answers</step-title>
                <step-content>
                    Use the following template to add the dependencies and plugins to the pom.xml file.

                    ```markdown
                    <xi:include href="fragments/java-maven-plugins-template.md" parse="text"/>
                    ```

                    After getting answers, implement the configuration following this order:

                    **Reference**: For detailed properties configuration strategy and conditional logic, see the template file.

                    ```markdown
                    <xi:include href="fragments/java-maven-properties-template.md" parse="text"/>
                    ```

                    **Summary**: Build properties incrementally based on user's actual needs and project requirements. The template provides comprehensive guidance on:
                    - Core properties (always added)
                    - Maven version and plugin properties (conditional)
                    - Dependency version properties (based on selections)
                    - Quality and analysis properties (with custom thresholds)
                    - Feature-specific plugin version properties
                    - Implementation guidelines

                    **Dependency Strategy**: Add only essential dependencies that enhance code quality and safety.

                    **Reference**: For specific dependency configurations, see the template file.

                    ```markdown
                    <xi:include href="fragments/java-maven-dependencies-template.md" parse="text"/>
                    ```

                    - **JSpecify**: Nullness annotations for improved null safety

                    #### Implementation Approach:
                    1. **Ask about code quality dependencies**: Follow the questions in the template file
                    2. **Add only selected dependencies**: Don't include dependencies the user doesn't need
                    3. **Configure with appropriate scope**: Use `provided` scope for compile-time only dependencies

                    **Plugin Configuration Strategy**: Add plugins based only on selected features and user needs.

                    **Reference**: For specific plugin configurations, see the template file.

                    **Core Plugins** (ask if user wants enhanced enforcement):
                    - **maven-compiler-plugin**: Enhanced with Error Prone and NullAway analysis
                    - **maven-enforcer-plugin**: With dependency convergence and circular dependency checks
                    - **maven-surefire-plugin**: For unit testing with proper configuration

                    **Feature-Based Plugins** (add only if selected):
                    - **Integration Testing**: maven-failsafe-plugin
                    - **Code Coverage**: jacoco-maven-plugin (in profile)
                    - **Mutation Testing**: pitest-maven (in profile)
                    - **Security Scanning**: dependency-check-maven (in profile)
                    - **Static Analysis**: spotbugs-maven-plugin, maven-pmd-plugin (in profile) &amp; sonar (in profile)
                    - **Version Management**: versions-maven-plugin
                    - **Build Info**: git-commit-id-plugin
                    - **Library Publishing**: flatten-maven-plugin

                    1. **Ask about enhancement level**: "Do you want enhanced code analysis (Error Prone, NullAway)? (y/n)"
                    2. **Add core plugins** based on enhancement choice
                    3. **Add feature plugins** only for selected features
                    4. **Configure profiles** for optional analysis tools
                    5. **Customize package names** in plugin configurations

                    **Profile Strategy**: Create profiles only for selected optional features to avoid overwhelming the default build.

                    **Reference**: For specific profile configurations, see the template file.

                    **Available Profiles** (add only if features selected):
                    - `jacoco`: Code coverage analysis
                    - `pitest`: Mutation testing
                    - `security`: OWASP dependency security scanning
                    - `find-bugs`: Static analysis with SpotBugs and PMD

                </step-content>
                <step-constraints>
                    <step-constraint-list>
                        <step-constraint>**MUST NOT** deviate from template specifications</step-constraint>
                        <step-constraint>**MUST** use `maven-plugins-*` format for property naming (e.g., `maven-plugins-compiler.version`, NOT `maven-compiler-plugin.version`)</step-constraint>
                        <step-constraint>**MUST** include ALL Error Prone and NullAway options as specified in template</step-constraint>
                        <step-constraint>**MUST** include `-Xlint:all` and `-Werror` compiler arguments</step-constraint>
                        <step-constraint>**MUST** include `--should-stop=ifError=FLOW` configuration</step-constraint>
                        <step-constraint>**MUST** include full NullAway configuration with `JSpecifyMode=true`, `TreatGeneratedAsUnannotated=true`, etc.</step-constraint>
                        <step-constraint>**MUST** include `extra-enforcer-rules` dependency and all specified rules in enforcer plugin</step-constraint>
                        <step-constraint>**MUST** follow template's `&lt;build&gt;` vs `&lt;reporting&gt;` section separation for profiles</step-constraint>
                        <step-constraint>**MUST** create `.mvn/jvm.config` when Error Prone is enabled</step-constraint>
                        <step-constraint>**MUST** update `AnnotatedPackages` and `targetClasses` to match actual project structure</step-constraint>
                        <step-constraint>**MUST** ensure template adherence is mandatory - no exceptions or simplified versions allowed</step-constraint>
                    </step-constraint-list>
                </step-constraints>
            </step>
            <step number="4">
                <step-title>Profile Usage Examples</step-title>
                <step-content>
                    Only provide examples for profiles that were actually added based on user selections.
                </step-content>
            </step>
        </steps>
    </instructions>

    <output-format>
        <output-format-list>
            <output-format-item>Ask questions one by one following the template exactly</output-format-item>
            <output-format-item>Wait for user responses before proceeding</output-format-item>
            <output-format-item>Implement only requested features based on user selections</output-format-item>
            <output-format-item>Follow template specifications exactly for all configurations</output-format-item>
            <output-format-item>Validate configuration after implementation</output-format-item>
            <output-format-item>Provide usage examples only for features that were added</output-format-item>
        </output-format-list>
    </output-format>

    <safeguards>
        <safeguards-list>
            <safeguards-item>Verify changes with the command: `mvn validate` or `./mvnw validate`</safeguards-item>
            <safeguards-item>Always read template files fresh using file_search and read_file tools</safeguards-item>
            <safeguards-item>Never proceed without user confirmation for each step</safeguards-item>
            <safeguards-item>Template adherence is mandatory - no exceptions or simplified versions</safeguards-item>
        </safeguards-list>
    </safeguards>
</prompt>
