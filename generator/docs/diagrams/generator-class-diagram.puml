@startuml
!theme plain
title "Generator Module - Class Structure (info.jab.pml)"

package "info.jab.pml" {
  class CursorRulesGenerator {
    + generate(xmlFileName: String, xslFileName: String): String
    + generate(xmlFileName: String, xslFileName: String, schemaFileName: String): String
    ..private pipeline..
    - loadTransformationSources(xmlFileName: String, xslFileName: String): Optional<TransformationSources>
    - loadResource(fileName: String): Optional<InputStream>
    - createSaxSource(sources: TransformationSources, schemaFileName: String): SAXSource
    - performTransformation(xmlSource: SAXSource, xslFileName: String): Optional<String>
    - executeTransformation(xmlSource: SAXSource, xslStream: InputStream): Optional<String>
  }

  class TransformationSources <<record>> {
    - xmlStream: InputStream
    - xslStream: InputStream
  }

  class ValidationErrorHandler {
    + warning(exception: SAXParseException)
    + error(exception: SAXParseException)
    + fatalError(exception: SAXParseException)
  }
}

CursorRulesGenerator *-- TransformationSources : uses
CursorRulesGenerator ..> ValidationErrorHandler : uses

note right of TransformationSources
Immutable record bundling XML and XSL input streams
for thread-safe, explicit resource handling.
end note

note bottom of CursorRulesGenerator
Public API provides two generate(...) overloads:
 - without schema validation
 - with optional XSD validation
The private pipeline is organized as pure, focused steps.
end note

@enduml


