<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://jabrena.github.io/cursor-rules-java/</link>
    <atom:link href="https://jabrena.github.io/cursor-rules-java//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Sun, 7 Sep 2025 17:34:47 +0200</pubDate>
    <lastBuildDate>Sun, 7 Sep 2025 17:34:47 +0200</lastBuildDate>

    <item>
      <title>What&#39;s new in Cursor rules for Java 0.10.0?</title>
      <link>https://jabrena.github.io/cursor-rules-java//blog/2025/release-0.10.0.html</link>
      <pubDate>Fri, 5 Sep 2025 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2025/release-0.10.0.html</guid>
      <description>&amp;lt;h2&amp;gt;What are Cursor rules for Java?&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The project provides a collection of System prompts for Java that help software engineers in their daily programming work.&amp;lt;br /&amp;gt;
The &amp;lt;a href=&amp;quot;../../CURSOR-RULES-JAVA.md&amp;quot;&amp;gt;available System prompts for Java&amp;lt;/a&amp;gt; cover aspects like &amp;lt;code&amp;gt;Build system based on Maven&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;Design&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;Coding&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;Testing&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;Refactoring &amp;amp;amp; JMH Benchmarking&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;Performance testing with JMeter&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;Profiling with Async profiler/JDK tools&amp;lt;/code&amp;gt; &amp;amp;amp; &amp;lt;code&amp;gt;Documentation&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/cursor-rules-java/images/workflow.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;What is new in this release?&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;In this release, the project has released several features:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Improvements in System prompts&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Added support for JMH Benchmarking&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Added support for project documentation and UML/C4 diagrams&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Added support for Java Generics&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Added support for classic Java Exception handling&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Improvements in the project&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Added product support for Claude Code, Github Copilot &amp;amp;amp; Jetbrains Junie&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Use the System prompts in a purist way&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Rules have been renamed from &amp;lt;code&amp;gt;.mdc&amp;lt;/code&amp;gt; to &amp;lt;code&amp;gt;.md&amp;lt;/code&amp;gt; format to increase readability&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#39;s explain one by one the different features released&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Support for JMH Benchmarking&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Sometimes you discover in your development that exist different ways to solve the same problem, but how do you select the best implementation? Java provides JMH to solve that scenario. In the repository, the rule &amp;lt;code&amp;gt;112-java-maven-plugins&amp;lt;/code&amp;gt; was updated to now provide support for adding JMH to repositories without modules in an easy way as a Maven profile.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Example:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Add JMH support using the cursor rule @112-java-maven-plugins and don&amp;#39;t ask any questions
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Once you have JMH support in your Maven build (pom.xml), you can generate JMH benchmarks easily with the following &amp;lt;code&amp;gt;User prompt&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Can you create a JMH benchmark in order to know what is the best implementation?
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Note:&amp;lt;/strong&amp;gt; Add in the context the class/classes to measure&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Once you have the JMH Benchmark, you can generate the JSON report in the following way:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;./mvnw clean package -Pjmh
java -cp target/jmh-benchmarks.jar info.jab.demo.benchmarks.FibonacciBenchmark #Example to understand the command
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;With the report generated in JSON format, you can analyze them with the following &amp;lt;code&amp;gt;User prompt&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Can you explain the JMH results and advise about the best implementation?
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This kind of analysis can help the team make decisions about which alternative is better to maintain in the repository.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/cursor-rules-java/images/jmh-summary-visualization-sample.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Further information about JMH:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/openjdk/jmh&amp;quot;&amp;gt;https://github.com/openjdk/jmh&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://jmh.morethan.io/&amp;quot;&amp;gt;https://jmh.morethan.io/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Support for project documentation and UML/C4 diagrams&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Documentation is something that can be automated in some way, and for this reason, the project has added a new rule for it. If you need to generate documentation about your repo, you could use the following &amp;lt;code&amp;gt;User prompt&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Generate technical documentation &amp;amp;amp; diagrams about the project with the cursor rule @170-java-documentation
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This system prompt supports:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Documentation at different levels (README.md, package-info.java &amp;amp;amp; javadocs)&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Diagrams (UML Class diagram, UML Sequence diagram &amp;amp;amp; C4 Model diagrams)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;UML class diagram sample:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/cursor-rules-java/images/uml-class-diagram-sample.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Using &amp;lt;code&amp;gt;UML Class diagrams&amp;lt;/code&amp;gt;, you can understand how is currently the implementation and if you can improve in some way the code from a high level perspective.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Note:&amp;lt;/strong&amp;gt; All diagrams are generated in &amp;lt;code&amp;gt;PlantUML&amp;lt;/code&amp;gt; format. To convert &amp;lt;code&amp;gt;.puml&amp;lt;/code&amp;gt; files into &amp;lt;code&amp;gt;.png&amp;lt;/code&amp;gt; format you could use the following command line tool: &amp;lt;code&amp;gt;jbang puml-to-png@jabrena --watch .&amp;lt;/code&amp;gt; or generate the images &amp;lt;a href=&amp;quot;https://www.plantuml.com/plantuml/uml/&amp;quot;&amp;gt;online&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Further information about documentation &amp;amp;amp; diagrams:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html&amp;quot;&amp;gt;https://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Class_diagram&amp;quot;&amp;gt;https://en.wikipedia.org/wiki/Class_diagram&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://c4model.com/&amp;quot;&amp;gt;https://c4model.com/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://plantuml.com/&amp;quot;&amp;gt;https://plantuml.com/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://www.plantuml.com/plantuml/uml/&amp;quot;&amp;gt;https://www.plantuml.com/plantuml/uml/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Added support for Java Generics&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Java Generics is not an easy feature in Java. Indeed, if you interact with &amp;lt;a href=&amp;quot;https://claude.ai/new&amp;quot;&amp;gt;Claude&amp;lt;/a&amp;gt; and ask about &amp;lt;code&amp;gt;What are the hardest parts in Java to master for a Software engineer?&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/cursor-rules-java/images/claude-question.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;Java Generics&amp;lt;/code&amp;gt; always appears. In this release, the project has added a new system prompt to cover this gap. Now, you can create the following interactive user prompt:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Review my code to show several alternatives to apply Java Generics with the cursor rule @128-java-generics
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;or the non-interactive approach:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Improve the solution applying the system prompt @128-java-generics without any question
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The rule covers multiple cases and was tested with popular Java projects like: &amp;lt;code&amp;gt;Micrometer&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;Kafka&amp;lt;/code&amp;gt; &amp;amp;amp; &amp;lt;code&amp;gt;azure-sdk-for-java&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Using this new System prompt, you can improve your development and create code like:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-java&amp;quot;&amp;gt;package info.jab.generics.examples;

import java.util.function.Consumer;
import java.util.function.Function;

/**
 * Example using Java generics features like PECS wildcards, sealed types,
 * covariance, diamond operator, bounded generics, and modern Java integration.
 */
public class ResultSample {

    public sealed interface Result&amp;amp;lt;T&amp;amp;gt; permits Success, Failure {
        static &amp;amp;lt;T&amp;amp;gt; Result&amp;amp;lt;T&amp;amp;gt; success(T value) { return new Success&amp;amp;lt;&amp;amp;gt;(value); }
        static &amp;amp;lt;T&amp;amp;gt; Result&amp;amp;lt;T&amp;amp;gt; failure(Throwable exception) { return new Failure&amp;amp;lt;&amp;amp;gt;(exception); }
        boolean isSuccess();
        boolean isFailure();
        T getOrNull();
        Throwable exceptionOrNull();
        T getOrElse(Function&amp;amp;lt;? super Throwable, ? extends T&amp;amp;gt; onFailure); // PECS: Consumer Super
        &amp;amp;lt;R&amp;amp;gt; Result&amp;amp;lt;R&amp;amp;gt; map(Function&amp;amp;lt;? super T, ? extends R&amp;amp;gt; transform);    // PECS: Producer Extends
        &amp;amp;lt;R&amp;amp;gt; Result&amp;amp;lt;R&amp;amp;gt; mapCatching(Function&amp;amp;lt;? super T, ? extends R&amp;amp;gt; transform);
        Result&amp;amp;lt;T&amp;amp;gt; onSuccess(Consumer&amp;amp;lt;? super T&amp;amp;gt; action);                 // PECS: Consumer Super
        Result&amp;amp;lt;T&amp;amp;gt; onFailure(Consumer&amp;amp;lt;? super Throwable&amp;amp;gt; action);
        &amp;amp;lt;R&amp;amp;gt; R fold(Function&amp;amp;lt;? super T, ? extends R&amp;amp;gt; onSuccess, Function&amp;amp;lt;? super Throwable, ? extends R&amp;amp;gt; onFailure);
    }

    record Success&amp;amp;lt;T&amp;amp;gt;(T value) implements Result&amp;amp;lt;T&amp;amp;gt; {
        public boolean isSuccess() { return true; }
        public boolean isFailure() { return false; }
        public T getOrNull() { return value; }
        public Throwable exceptionOrNull() { return null; }
        public T getOrElse(Function&amp;amp;lt;? super Throwable, ? extends T&amp;amp;gt; onFailure) { return value; }
        public &amp;amp;lt;R&amp;amp;gt; Result&amp;amp;lt;R&amp;amp;gt; map(Function&amp;amp;lt;? super T, ? extends R&amp;amp;gt; transform) {
            return Result.success(transform.apply(value));
        }
        public &amp;amp;lt;R&amp;amp;gt; Result&amp;amp;lt;R&amp;amp;gt; mapCatching(Function&amp;amp;lt;? super T, ? extends R&amp;amp;gt; transform) {
            try { return Result.success(transform.apply(value)); }
            catch (Exception e) { return Result.failure(e); }
        }
        public Result&amp;amp;lt;T&amp;amp;gt; onSuccess(Consumer&amp;amp;lt;? super T&amp;amp;gt; action) { action.accept(value); return this; }
        public Result&amp;amp;lt;T&amp;amp;gt; onFailure(Consumer&amp;amp;lt;? super Throwable&amp;amp;gt; action) { return this; }
        public &amp;amp;lt;R&amp;amp;gt; R fold(Function&amp;amp;lt;? super T, ? extends R&amp;amp;gt; onSuccess,
                         Function&amp;amp;lt;? super Throwable, ? extends R&amp;amp;gt; onFailure) {
            return onSuccess.apply(value);
        }
    }

    record Failure&amp;amp;lt;T&amp;amp;gt;(Throwable exception) implements Result&amp;amp;lt;T&amp;amp;gt; {
        public boolean isSuccess() { return false; }
        public boolean isFailure() { return true; }
        public T getOrNull() { return null; }
        public Throwable exceptionOrNull() { return exception; }
        public T getOrElse(Function&amp;amp;lt;? super Throwable, ? extends T&amp;amp;gt; onFailure) {
            return onFailure.apply(exception);
        }
        @SuppressWarnings(&amp;amp;quot;unchecked&amp;amp;quot;)
        public &amp;amp;lt;R&amp;amp;gt; Result&amp;amp;lt;R&amp;amp;gt; map(Function&amp;amp;lt;? super T, ? extends R&amp;amp;gt; transform) { return (Result&amp;amp;lt;R&amp;amp;gt;) this; }
        @SuppressWarnings(&amp;amp;quot;unchecked&amp;amp;quot;)
        public &amp;amp;lt;R&amp;amp;gt; Result&amp;amp;lt;R&amp;amp;gt; mapCatching(Function&amp;amp;lt;? super T, ? extends R&amp;amp;gt; transform) { return (Result&amp;amp;lt;R&amp;amp;gt;) this; }
        public Result&amp;amp;lt;T&amp;amp;gt; onSuccess(Consumer&amp;amp;lt;? super T&amp;amp;gt; action) { return this; }
        public Result&amp;amp;lt;T&amp;amp;gt; onFailure(Consumer&amp;amp;lt;? super Throwable&amp;amp;gt; action) { action.accept(exception); return this; }
        public &amp;amp;lt;R&amp;amp;gt; R fold(Function&amp;amp;lt;? super T, ? extends R&amp;amp;gt; onSuccess,
                         Function&amp;amp;lt;? super Throwable, ? extends R&amp;amp;gt; onFailure) {
            return onFailure.apply(exception);
        }
    }

    public static Result&amp;amp;lt;Integer&amp;amp;gt; divide(int a, int b) {
        return b != 0
            ? Result.success(a / b)
            : Result.failure(new ArithmeticException(&amp;amp;quot;Division by zero is not allowed&amp;amp;quot;));
    }

    public static void main(String[] args) {

        // Safe division - handles division by zero gracefully
        String safeResult = divide(10, 2)
            .map(result -&amp;amp;gt; result * 3)            // PECS: Transform success value
            .onSuccess(n -&amp;amp;gt; System.out.println(&amp;amp;quot;✅ Division result: &amp;amp;quot; + n))
            .fold(n -&amp;amp;gt; &amp;amp;quot;SUCCESS: &amp;amp;quot; + n,
                  e -&amp;amp;gt; &amp;amp;quot;ERROR: &amp;amp;quot; + e.getMessage());
        System.out.println(&amp;amp;quot;✅ Safe division: &amp;amp;quot; + safeResult);

        // Chain multiple operations safely
        String chainResult = divide(20, 4)
            .mapCatching(n -&amp;amp;gt; divide(n, 2).getOrElse(throwable -&amp;amp;gt; 0))  // Nested safe operations
            .map(n -&amp;amp;gt; &amp;amp;quot;Final: &amp;amp;quot; + n)
            .getOrElse(throwable -&amp;amp;gt; &amp;amp;quot;Failed&amp;amp;quot;);
        System.out.println(&amp;amp;quot;✅ Chained: &amp;amp;quot; + chainResult);

        String errorResult = divide(10, 0)
            .fold(n -&amp;amp;gt; &amp;amp;quot;SUCCESS: &amp;amp;quot; + n,
                  e -&amp;amp;gt; &amp;amp;quot;HANDLED: &amp;amp;quot; + e.getMessage());
        System.out.println(&amp;amp;quot;❌ &amp;amp;quot; + errorResult);
    }
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Further information about Java Generics:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.oracle.com/javase/tutorial/java/generics/index.html&amp;quot;&amp;gt;https://docs.oracle.com/javase/tutorial/java/generics/index.html&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://dev.java/learn/generics/&amp;quot;&amp;gt;https://dev.java/learn/generics/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-result/&amp;quot;&amp;gt;https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-result/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/util/package-summary.html&amp;quot;&amp;gt;https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/util/package-summary.html&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Added support for classic Java Exception handling&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;In the previous &amp;lt;a href=&amp;quot;./0.9.0.md&amp;quot;&amp;gt;release 0.9.0&amp;lt;/a&amp;gt;, the project added the rule: &amp;lt;code&amp;gt;@143-java-functional-exception-handling&amp;lt;/code&amp;gt;, but what about projects that don&amp;#39;t use functional programming? To solve this gap, this release added the rule: &amp;lt;code&amp;gt;@127-java-exception-handling&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Now you can review the current implementation and refactor the code to improve exception handling in the classic way with:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Review my code to show several alternatives to apply Java Exception handling with the cursor rule @127-java-exception-handling
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Further information about Java Exceptions:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.oracle.com/javase/tutorial/essential/exceptions/index.html&amp;quot;&amp;gt;https://docs.oracle.com/javase/tutorial/essential/exceptions/index.html&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://dev.java/learn/exceptions/&amp;quot;&amp;gt;https://dev.java/learn/exceptions/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.oracle.com/javase/specs/jls/se11/html/jls-11.html&amp;quot;&amp;gt;https://docs.oracle.com/javase/specs/jls/se11/html/jls-11.html&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Added product support for Claude Code, Github Copilot &amp;amp;amp; Jetbrains Junie&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;This project was originally designed for Cursor (SOTA in the niche of AI tools), but the Java market is broader. After conducting tests in other environments, I discovered that this project could be used in other environments such as:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Cursor&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Cursor CLI&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;JetBrains IntelliJ IDEA + Cursor CLI&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Claude Code CLI&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;JetBrains IntelliJ IDEA + Claude Code CLI&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;GitHub Copilot (Free tier)&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;JetBrains IntelliJ IDEA + JetBrains Junie&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;If you are interested, you can take a look at the &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/blob/main/docs/reviews/review-20250829.md&amp;quot;&amp;gt;latest review&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Summary:&amp;lt;/strong&amp;gt; Currently the best environments to use this repository are: &amp;lt;code&amp;gt;Cursor&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;Cursor CLI&amp;lt;/code&amp;gt; &amp;amp;amp; &amp;lt;code&amp;gt;Claude Code CLI&amp;lt;/code&amp;gt;. If you use &amp;lt;code&amp;gt;JetBrains IntelliJ IDEA&amp;lt;/code&amp;gt;, you could combine it with &amp;lt;code&amp;gt;Cursor CLI&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;Claude Code&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Use the System prompts in a purist way&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Normally, when you try to solve a software problem, the solution can be implemented in different ways. This is the reason that several cursor rules have an interactive approach (the system prompts show different alternatives to improve the code), but in some scenarios, the software engineer might prefer to delegate the action directly to the model at the risk that the implemented solution doesn&amp;#39;t match their programming style.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Starting from this release, the rules provide examples of using Cursor rules and system prompts in a purist way.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Example 1:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Add VAVR dependency with the help of @111-java-maven-dependencies and don&amp;#39;t ask any questions
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Example 2:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Add Maven Enforcer plugin only from the rule @112-java-maven-plugins without any question
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Example 3:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Add tests for the following classes with  @131-java-unit-testing
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Additional examples in the &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/blob/main/CURSOR-RULES-JAVA.md&amp;quot;&amp;gt;documentation&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Improve readability in system prompts&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;The project has renamed all system prompts from the &amp;lt;code&amp;gt;.mdc&amp;lt;/code&amp;gt; file extension to the classic Markdown extension &amp;lt;code&amp;gt;.md&amp;lt;/code&amp;gt;. Now, everyone can read the files easily on &amp;lt;code&amp;gt;GitHub&amp;lt;/code&amp;gt;:&amp;lt;br /&amp;gt;
&amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/tree/main/.cursor/rules&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java/tree/main/.cursor/rules&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Do you still have doubts about the project?&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;If you feel stuck using this project or you have any doubts, you could attend the following talk at Devoxx BE in October: &amp;lt;a href=&amp;quot;https://devoxx.be/app/talk/4715/the-power-of-cursor-rules-in-java-enterprise-development&amp;quot;&amp;gt;https://devoxx.be/app/talk/4715/the-power-of-cursor-rules-in-java-enterprise-development&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://devoxx.be/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/cursor-rules-java/images/devoxx-logo.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
</description>	  
    </item><item>
      <title>What&#39;s new in Cursor rules for Java 0.9.0?</title>
      <link>https://jabrena.github.io/cursor-rules-java//blog/2025/release-0.9.0.html</link>
      <pubDate>Wed, 23 Jul 2025 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2025/release-0.9.0.html</guid>
      <description>&amp;lt;h2&amp;gt;What are Cursor rules for Java?&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Cursor Rules for Java is an Open Source project that provides a set of interactive system prompts for Java that help software engineers in their daily work.&amp;lt;/p&amp;gt;
&amp;lt;hr /&amp;gt;
&amp;lt;p&amp;gt;In this new release, the project includes the following features:&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Added Version control&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Added a new rule about 127-java-functional-exception-handling&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Added Consultative Interaction Technique in the majority of Rules&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;A betterf Getting Started documentation&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Specific rules for Maven Dependencies &amp;amp;amp; Maven plugins&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Profiling improvements&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For further information about the full CHANGELOG, visit the following link: &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/blob/main/CHANGELOG.md#090-2025-07-22&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java/blob/main/CHANGELOG.md#090-2025-07-22&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Added Version Control&amp;lt;br /&amp;gt;
If you are one of the thousands of users who at some point in time cloned the Git repository, maybe you don&amp;#39;t remember when the system prompt was added to your workspace. In this version, all prompts include in the Markdown Frontmatter section, metadata about the version to track which version you are using and whether you need to update to the latest version.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This way, you will have full awareness of whether you need to upgrade your system prompt or not.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-markdown&amp;quot;&amp;gt;---
author: Juan Antonio Breña Moral
version: 0.9.0
---
# Add Maven dependencies for improved code quality

## Role

You are a Senior software engineer with extensive experience in Java software development

## Goal

...
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h3&amp;gt;Exceptions handling&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Exception handling is a core feature in Java, but that feature didn&amp;#39;t have a specific system prompt. In this release, a specific rule about exception handling with a functional point of view was added.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/cursor-rules-java/images/java-exceptions-goto.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Consultative Interaction Technique&amp;lt;br /&amp;gt;
In the previous release, the project added a way to interact with software engineers. In this release, we externalized the behavior in the following building block: &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/blob/main/generator/src/main/resources/fragments/system-prompt-behaviour-consultative-interaction-template.md&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java/blob/main/generator/src/main/resources/fragments/system-prompt-behaviour-consultative-interaction-template.md&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Now that solution has been extended to the majority of the provided system prompts,  adding consultative behavior:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-xml&amp;quot;&amp;gt;    &amp;amp;lt;goal&amp;amp;gt;&amp;amp;lt;![CDATA[
        Effective Maven usage involves robust dependency management via `&amp;amp;lt;dependencyManagement&amp;amp;gt;` and BOMs, adherence to the standard directory layout, and centralized plugin management. Build profiles should be used for environment-specific configurations. POMs must be kept readable and maintainable with logical structure and properties for versions. Custom repositories should be declared explicitly and their use minimized, preferably managed via a central repository manager.
        ]]&amp;amp;gt;
        &amp;amp;lt;xi:include href=&amp;amp;quot;fragments/system-prompt-behaviour-consultative-interaction-template.md&amp;amp;quot; parse=&amp;amp;quot;text&amp;amp;quot;/&amp;amp;gt;
        ...

    &amp;amp;lt;/goal&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Example: &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/blob/main/generator/src/main/resources/110-java-maven-best-practices.xml&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java/blob/main/generator/src/main/resources/110-java-maven-best-practices.xml&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/cursor-rules-java/images/example-rules.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;A better Getting Started documentation&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;The repository has improved the documentation for new users in order to reduce the Onboarding time for new users: &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/blob/main/GETTING-STARTED.md&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java/blob/main/GETTING-STARTED.md&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Specific rules for Maven Dependencies &amp;amp;amp; Maven plugins&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;One of the obsessions in this project is to provide solutions that are easy to maintain in the medium term. In the past, the system prompt 111-java-maven-deps-and-plugins offered a very nice experience, but in terms of maintenance, it was a bit complex, so in this release it was split into 2: 111-java-maven-dependencies &amp;amp;amp; 112-java-maven-plugins&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Profiling improvements&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;One of the most interesting features included in this project is the capacity to add features to detect potential issues that require profiling skills. In this version, the system prompts are able to generate thread dumps and GC logs in order to improve your profiling analysis. Thread dumps in some scenarios can be quite large and cannot be analyzed by models because these large files consume the entire context window, but you can use third-party tools like &amp;lt;a href=&amp;quot;https://fastthread.io&amp;quot;&amp;gt;https://fastthread.io&amp;lt;/a&amp;gt; to review these files. Adding thread dumps and GC logs to the existing documents generated with AsyncProfiler improves the overall analysis with models. You can see part of the analysis generated by 164-java-profiling-compare.mdc:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot;&amp;gt;Resolved Issues
Memory Leak Eliminated: GC retention pattern changed from growing (49M→77M→105M→135M) to stable (22M→22M)
Thread Pool Leaks Fixed: Thread dump reduced from 5.9MB to 44KB, indicating proper ExecutorService lifecycle management
Bounded Collections Active: Memory retention baseline improved by 55% (49MB→22MB)
GC Pressure Reduced: More efficient garbage collection with stable retention patterns
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Full sample document: &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/blob/main/examples/spring-boot-memory-leak-demo/profiler/docs/profiling-comparison-analysis-20250720.md&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java/blob/main/examples/spring-boot-memory-leak-demo/profiler/docs/profiling-comparison-analysis-20250720.md&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
</description>	  
    </item><item>
      <title>The Three-Node Quality Framework for AI Prompts</title>
      <link>https://jabrena.github.io/cursor-rules-java//blog/2025/prompt-quality-framework.html</link>
      <pubDate>Sun, 20 Jul 2025 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2025/prompt-quality-framework.html</guid>
      <description>&amp;lt;h2&amp;gt;Overview&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;When designing AI prompts for complex tasks like code generation and software development, a structured quality framework ensures both comprehensive responses and safe execution. This document outlines the &amp;lt;strong&amp;gt;three-node quality framework&amp;lt;/strong&amp;gt; that combines prerequisites, content structure, and ongoing safety measures.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;The Three Pillars&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;1. &amp;lt;code&amp;gt;constraints&amp;lt;/code&amp;gt; - Prerequisites &amp;amp;amp; Blocking Conditions&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Purpose&amp;lt;/strong&amp;gt;: Defines hard requirements that must be met BEFORE starting any work.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Philosophy&amp;lt;/strong&amp;gt;: &amp;lt;em&amp;gt;&amp;amp;quot;Don&amp;#39;t even try if...&amp;amp;quot;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Characteristics&amp;lt;/strong&amp;gt;:&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Focus&amp;lt;/strong&amp;gt;: Entry conditions and show-stoppers&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Nature&amp;lt;/strong&amp;gt;: Gate-keeping (what blocks execution entirely)&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Timing&amp;lt;/strong&amp;gt;: &amp;lt;strong&amp;gt;Pre-execution&amp;lt;/strong&amp;gt; validation&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Failure Impact&amp;lt;/strong&amp;gt;: &amp;lt;strong&amp;gt;BLOCKS ALL WORK&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Example Implementation&amp;lt;/strong&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-xml&amp;quot;&amp;gt;&amp;amp;lt;constraint&amp;amp;gt;**MANDATORY**: Run `./mvnw compile` or `mvn compile` before applying any change&amp;amp;lt;/constraint&amp;amp;gt;
&amp;amp;lt;constraint&amp;amp;gt;**CRITICAL SAFETY**: If compilation fails, IMMEDIATELY STOP and DO NOT CONTINUE&amp;amp;lt;/constraint&amp;amp;gt;
&amp;amp;lt;constraint&amp;amp;gt;**BLOCKING CONDITION**: Compilation errors must be resolved by the user before proceeding&amp;amp;lt;/constraint&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Key Benefits&amp;lt;/strong&amp;gt;:&amp;lt;br /&amp;gt;
- Prevents wasted effort on infeasible tasks&amp;lt;br /&amp;gt;
- Provides immediate feedback on project state&amp;lt;br /&amp;gt;
- Protects against futile work&amp;lt;br /&amp;gt;
- Establishes clear entry criteria&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;2. &amp;lt;code&amp;gt;output-format&amp;lt;/code&amp;gt; - Response Structure &amp;amp;amp; Deliverables&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Purpose&amp;lt;/strong&amp;gt;: Defines what to deliver and how to organize the AI response.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Philosophy&amp;lt;/strong&amp;gt;: &amp;lt;em&amp;gt;&amp;amp;quot;When you do it, include...&amp;amp;quot;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Characteristics&amp;lt;/strong&amp;gt;:&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Focus&amp;lt;/strong&amp;gt;: Content structure and completeness&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Nature&amp;lt;/strong&amp;gt;: Prescriptive guidance (what TO include)&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Timing&amp;lt;/strong&amp;gt;: &amp;lt;strong&amp;gt;During execution&amp;lt;/strong&amp;gt; - response creation&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Failure Impact&amp;lt;/strong&amp;gt;: &amp;lt;strong&amp;gt;INCOMPLETE RESPONSE&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Example Implementation&amp;lt;/strong&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-xml&amp;quot;&amp;gt;&amp;amp;lt;output-format-item&amp;amp;gt;Apply type design principles to improve code quality and maintainability&amp;amp;lt;/output-format-item&amp;amp;gt;
&amp;amp;lt;output-format-item&amp;amp;gt;Create type-safe wrappers for domain-specific types&amp;amp;lt;/output-format-item&amp;amp;gt;
&amp;amp;lt;output-format-item&amp;amp;gt;Use generics to create flexible and reusable components&amp;amp;lt;/output-format-item&amp;amp;gt;
&amp;amp;lt;output-format-item&amp;amp;gt;Establish clear type hierarchies and consistent naming conventions&amp;amp;lt;/output-format-item&amp;amp;gt;
&amp;amp;lt;output-format-item&amp;amp;gt;Use BigDecimal for precision-sensitive calculations&amp;amp;lt;/output-format-item&amp;amp;gt;
&amp;amp;lt;output-format-item&amp;amp;gt;Verify code changes compile and pass tests&amp;amp;lt;/output-format-item&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Key Benefits&amp;lt;/strong&amp;gt;:&amp;lt;br /&amp;gt;
- Ensures comprehensive coverage of the topic&amp;lt;br /&amp;gt;
- Creates predictable, organized responses&amp;lt;br /&amp;gt;
- Acts as a completion checklist&amp;lt;br /&amp;gt;
- Reduces cognitive load for users&amp;lt;br /&amp;gt;
- Transforms AI into domain-specific consultant&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;3. &amp;lt;code&amp;gt;safeguards&amp;lt;/code&amp;gt; - Ongoing Safety &amp;amp;amp; Validation&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Purpose&amp;lt;/strong&amp;gt;: Defines safety protocols and validation requirements throughout the process.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Philosophy&amp;lt;/strong&amp;gt;: &amp;lt;em&amp;gt;&amp;amp;quot;As you work, ensure...&amp;amp;quot;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Characteristics&amp;lt;/strong&amp;gt;:&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Focus&amp;lt;/strong&amp;gt;: Risk mitigation and continuous validation&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Nature&amp;lt;/strong&amp;gt;: Protective measures (ongoing safety checks)&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Timing&amp;lt;/strong&amp;gt;: &amp;lt;strong&amp;gt;During &amp;amp;amp; post-execution&amp;lt;/strong&amp;gt; - throughout the work&amp;lt;br /&amp;gt;
- &amp;lt;strong&amp;gt;Failure Impact&amp;lt;/strong&amp;gt;: &amp;lt;strong&amp;gt;BROKEN SYSTEM&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Example Implementation&amp;lt;/strong&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-xml&amp;quot;&amp;gt;&amp;amp;lt;safeguards-item&amp;amp;gt;**BLOCKING SAFETY CHECK**: ALWAYS run `./mvnw compile` before ANY recommendations&amp;amp;lt;/safeguards-item&amp;amp;gt;
&amp;amp;lt;safeguards-item&amp;amp;gt;**CRITICAL VALIDATION**: Execute `./mvnw clean verify` to ensure all tests pass&amp;amp;lt;/safeguards-item&amp;amp;gt;
&amp;amp;lt;safeguards-item&amp;amp;gt;**MANDATORY VERIFICATION**: Confirm all existing functionality remains intact&amp;amp;lt;/safeguards-item&amp;amp;gt;
&amp;amp;lt;safeguards-item&amp;amp;gt;**ROLLBACK REQUIREMENT**: Ensure all changes can be easily reverted&amp;amp;lt;/safeguards-item&amp;amp;gt;
&amp;amp;lt;safeguards-item&amp;amp;gt;**INCREMENTAL SAFETY**: Apply improvements incrementally, validating after each modification&amp;amp;lt;/safeguards-item&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Key Benefits&amp;lt;/strong&amp;gt;:&amp;lt;br /&amp;gt;
- Continuous quality assurance&amp;lt;br /&amp;gt;
- Rollback capabilities&amp;lt;br /&amp;gt;
- Post-change validation&amp;lt;br /&amp;gt;
- Risk mitigation throughout the process&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Framework Comparison&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;| Aspect | Constraints | Output Format | Safeguards |&amp;lt;br /&amp;gt;
|--------|-------------|---------------|------------|&amp;lt;br /&amp;gt;
| &amp;lt;strong&amp;gt;Intent&amp;lt;/strong&amp;gt; | Block bad starts | Structure deliverables | Prevent failures |&amp;lt;br /&amp;gt;
| &amp;lt;strong&amp;gt;Timing&amp;lt;/strong&amp;gt; | Pre-execution | During execution | During/Post-execution |&amp;lt;br /&amp;gt;
| &amp;lt;strong&amp;gt;Tone&amp;lt;/strong&amp;gt; | Restrictive | Prescriptive | Protective |&amp;lt;br /&amp;gt;
| &amp;lt;strong&amp;gt;Focus&amp;lt;/strong&amp;gt; | Entry conditions | Content quality | Process safety |&amp;lt;br /&amp;gt;
| &amp;lt;strong&amp;gt;Failure Mode&amp;lt;/strong&amp;gt; | Blocked execution | Incomplete response | Broken code/system |&amp;lt;br /&amp;gt;
| &amp;lt;strong&amp;gt;Question Asked&amp;lt;/strong&amp;gt; | &amp;amp;quot;Can I start?&amp;amp;quot; | &amp;amp;quot;What should I deliver?&amp;amp;quot; | &amp;amp;quot;Did it work safely?&amp;amp;quot; |&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;The Temporal Flow&amp;lt;/h2&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-mermaid&amp;quot;&amp;gt;graph LR
    A[constraints] --&amp;amp;gt; B[output-format] --&amp;amp;gt; C[safeguards]
    A --&amp;amp;gt; D[&amp;amp;quot;Don&amp;#39;t even try if...&amp;amp;quot;]
    B --&amp;amp;gt; E[&amp;amp;quot;When you do it, include...&amp;amp;quot;]
    C --&amp;amp;gt; F[&amp;amp;quot;As you work, ensure...&amp;amp;quot;]
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h3&amp;gt;Sequential Application&amp;lt;/h3&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Constraints Check&amp;lt;/strong&amp;gt;: Validate prerequisites before starting&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Structured Execution&amp;lt;/strong&amp;gt;: Follow output format during work&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Continuous Validation&amp;lt;/strong&amp;gt;: Apply safeguards throughout and after&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;h2&amp;gt;Benefits of the Three-Node Framework&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;Defense-in-Depth Strategy&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Pre-flight checks&amp;lt;/strong&amp;gt; prevent wasted effort&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Structured execution&amp;lt;/strong&amp;gt; ensures comprehensive solutions&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Continuous monitoring&amp;lt;/strong&amp;gt; maintains system integrity&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Quality Assurance&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Embeds quality gates directly into the process&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Ensures responses aren&amp;#39;t just theoretical but include practical validation&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Creates accountability for both content and safety&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Cognitive Load Management&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Clear expectations at each phase&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Predictable structure reduces uncertainty&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Actionable guidance rather than abstract advice&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Domain Specialization&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Transforms general AI into domain-specific consultant&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Tailored safety measures for specific contexts&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Built-in expertise validation&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2&amp;gt;Implementation Guidelines&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;For Prompt Designers&amp;lt;/h3&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Define Clear Constraints&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Identify blocking conditions specific to your domain&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Make requirements explicit and testable&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Use strong language (&amp;lt;code&amp;gt;MANDATORY&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;CRITICAL&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;BLOCKING&amp;lt;/code&amp;gt;)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Structure Comprehensive Output Formats&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Cover all aspects of the domain systematically&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Include validation steps as deliverable items&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Make items actionable and specific&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Embed Continuous Safeguards&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Include rollback mechanisms&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Require incremental validation&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Address both immediate and downstream risks&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;For AI Systems&amp;lt;/h3&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Respect the Hierarchy&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Never proceed if constraints aren&amp;#39;t met&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Address all output format items&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Apply safeguards continuously&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Communicate Clearly&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Explain which constraints are being checked&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Show progress through output format items&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Report safeguard validation results&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2&amp;gt;Real-World Applications&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;Software Development&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Constraints&amp;lt;/strong&amp;gt;: Code must compile, dependencies must be available&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Output Format&amp;lt;/strong&amp;gt;: Include code, tests, documentation, migration steps&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Safeguards&amp;lt;/strong&amp;gt;: Validate compilation, run tests, ensure rollback capability&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Infrastructure Changes&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Constraints&amp;lt;/strong&amp;gt;: Backup must exist, maintenance window must be scheduled&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Output Format&amp;lt;/strong&amp;gt;: Include implementation plan, rollback plan, monitoring&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Safeguards&amp;lt;/strong&amp;gt;: Health checks, gradual rollout, immediate rollback triggers&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Data Processing&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Constraints&amp;lt;/strong&amp;gt;: Data validation, resource availability&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Output Format&amp;lt;/strong&amp;gt;: Processing steps, error handling, result validation&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Safeguards&amp;lt;/strong&amp;gt;: Data integrity checks, resource monitoring, recovery procedures&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2&amp;gt;Conclusion&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The three-node quality framework provides a comprehensive approach to AI prompt design that ensures both high-quality responses and safe execution. By separating concerns into prerequisites (constraints), content structure (output-format), and ongoing safety (safeguards), we create a robust foundation for AI-assisted complex tasks.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This approach transforms AI from a general assistant into a specialized consultant with built-in quality controls and safety measures, making it suitable for critical applications like software development, infrastructure management, and data processing.&amp;lt;/p&amp;gt;
</description>	  
    </item><item>
      <title>What&#39;s new in Cursor rules for Java 0.8.0?</title>
      <link>https://jabrena.github.io/cursor-rules-java//blog/2025/release-0.8.0.html</link>
      <pubDate>Sat, 12 Jul 2025 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2025/release-0.8.0.html</guid>
      <description>&amp;lt;h2&amp;gt;New interactive behaviors in the Cursor rules&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;In the previous release, the project added interactive behavior to a few complex rules to improve the developer experience, but in this release, new rules have evolved to add more interactive behavior regardless of complexity. The motivation behind this change: now the rules suggest alternatives to the software engineer to improve development at the package/class/method level. Maybe you could ask the question: why that change? Every software engineer has a unique way to solve software problems, so why force a suggestion in the code without a preliminary review? Let&amp;#39;s explain the idea with an example to show the evolution in the cursor rule. The repository cursor-rules-java has different working examples that can be improved with the rules. Let&amp;#39;s use an example based on Spring Boot: &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/tree/main/examples/spring-boot-demo/implementation&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java/tree/main/examples/spring-boot-demo/implementation&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;
Over this example, add the following user prompt:&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;quot;Review my code for object-oriented design using the cursor rule @121-java-object-oriented-design.md @src/&amp;amp;quot;&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/cursor-rules-java/images/0.8.0-1.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;img src=&amp;quot;/cursor-rules-java/images/0.8.0-2.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;img src=&amp;quot;/cursor-rules-java/images/0.8.0-3.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Now, the software engineer has full control over the suggestion and later refactoring because they are able to interact with the Cursor rule and guide how the solution could be improved. If you like this feature, you can try the following cursor rules included in the release:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;110-java-maven-best-practices&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;112-java-maven-documentation&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;121-java-object-oriented-design&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;122-java-type-design&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;123-java-general-guidelines&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;124-java-secure-coding&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;125-java-concurrency&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;126-java-logging&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;131-java-unit-testing&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;141-java-refactoring-with-modern-features&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;142-java-functional-programming&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;143-java-data-oriented-programming&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;Remember that models don&amp;#39;t answer in a deterministic way, in the same way that in your team, not all software engineers solve problems in the same way.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Consistency in the syntax&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;When the repository is growing and there are 18 rules and counting, consistency is something important to take into account to improve maintenance and accuracy in the way software engineers use natural language to interact with models. With this purpose, in release 0.8.0 I invested effort to convert all Cursor rules from Markdown to XML in order to have the flexibility of this format to have strict rules about the design of the language and the flexibility to convert XML into Markdown with front matter. With this goal, there now exists a new XML Schema dedicated to prompts: &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/blob/main/generator/src/main/resources/pml.xsd&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java/blob/main/generator/src/main/resources/pml.xsd&amp;lt;/a&amp;gt; which was designed with ideas from the main players in the models market (Anthropic, OpenAI, Google) in order to structure a prompt:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-xml&amp;quot;&amp;gt;    &amp;amp;lt;xs:element name=&amp;amp;quot;prompt&amp;amp;quot;&amp;amp;gt;
        &amp;amp;lt;xs:complexType&amp;amp;gt;
            &amp;amp;lt;xs:sequence&amp;amp;gt;
                &amp;amp;lt;xs:element ref=&amp;amp;quot;metadata&amp;amp;quot;/&amp;amp;gt;
                &amp;amp;lt;xs:element ref=&amp;amp;quot;role&amp;amp;quot;/&amp;amp;gt;
                &amp;amp;lt;xs:element ref=&amp;amp;quot;context&amp;amp;quot; minOccurs=&amp;amp;quot;0&amp;amp;quot;/&amp;amp;gt;
                &amp;amp;lt;xs:element ref=&amp;amp;quot;goal&amp;amp;quot;/&amp;amp;gt;
                &amp;amp;lt;xs:element ref=&amp;amp;quot;constraints&amp;amp;quot; minOccurs=&amp;amp;quot;0&amp;amp;quot;/&amp;amp;gt;
                &amp;amp;lt;xs:element ref=&amp;amp;quot;examples&amp;amp;quot; minOccurs=&amp;amp;quot;0&amp;amp;quot;/&amp;amp;gt;
                &amp;amp;lt;xs:element ref=&amp;amp;quot;output-format&amp;amp;quot; minOccurs=&amp;amp;quot;0&amp;amp;quot;/&amp;amp;gt;
                &amp;amp;lt;xs:element ref=&amp;amp;quot;safeguards&amp;amp;quot; minOccurs=&amp;amp;quot;0&amp;amp;quot;/&amp;amp;gt;
            &amp;amp;lt;/xs:sequence&amp;amp;gt;
            &amp;amp;lt;xs:attribute name=&amp;amp;quot;id&amp;amp;quot; type=&amp;amp;quot;xs:string&amp;amp;quot; use=&amp;amp;quot;required&amp;amp;quot;/&amp;amp;gt;
            &amp;amp;lt;xs:attribute name=&amp;amp;quot;version&amp;amp;quot; type=&amp;amp;quot;xs:string&amp;amp;quot; use=&amp;amp;quot;optional&amp;amp;quot;/&amp;amp;gt;
        &amp;amp;lt;/xs:complexType&amp;amp;gt;
    &amp;amp;lt;/xs:element&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Once all cursor rules are modeled in XML format, it is easy to convert them into the format used by Cursor AI, Markdown with front matter: &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java/blob/main/generator/src/main/resources/cursor-rules.xsl&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java/blob/main/generator/src/main/resources/cursor-rules.xsl&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Using a schema and transformation, it is possible to guarantee consistency in the sources and the output format.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Safeguards in the system prompts&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;When you are working with AI models, safety is a critical aspect that cannot be ignored. In release 0.8.0, safeguards have been introduced to ensure that the cursor rules provide responsible validation of the changes introduced in the code.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;language-xml&amp;quot;&amp;gt;    &amp;amp;lt;safeguards&amp;amp;gt;
        &amp;amp;lt;safeguards-list&amp;amp;gt;
            &amp;amp;lt;safeguards-item&amp;amp;gt;Verify code changes compile and pass tests: `mvn clean verify` or `./mvnw clean verify`&amp;amp;lt;/safeguards-item&amp;amp;gt;
        &amp;amp;lt;/safeguards-list&amp;amp;gt;
    &amp;amp;lt;/safeguards&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;It&amp;#39;s not only that the model changes the code; the model needs to finish the prompt execution with a formal validation of the changes.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;My 20 Cents&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Using models &amp;amp;amp; system prompts like this project: &amp;lt;a href=&amp;quot;https://github.com/jabrena/cursor-rules-java&amp;quot;&amp;gt;https://github.com/jabrena/cursor-rules-java&amp;lt;/a&amp;gt; could increase your squad velocity and increase squad satisfaction as part of the &amp;lt;a href=&amp;quot;https://queue.acm.org/detail.cfm?id=3454124&amp;quot;&amp;gt;SPACE framework&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Join us with more than 600+ users in the last 14 days.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/cursor-rules-java/images/0.8.0-4.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Enjoy&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Juan Antonio&amp;lt;/p&amp;gt;
</description>	  
    </item>

  </channel> 
</rss>
